version: "3"

services:
  ####################### Keycloak Definition #######################
  # keycloak:
  #   restart: always
  #   container_name: mds_keycloak
  #   image: jboss/keycloak
  #   environment:
  #     - KEYCLOAK_USER=admin
  #     - KEYCLOAK_PASSWORD=admin
  #     - KEYCLOAK_IMPORT=/tmp/keycloak-local-realm.json
  #     - DB_VENDOR=h2
  #   volumes:
  #     - ./monitoring/keycloak/keycloak-local-realm.json:/tmp/keycloak-local-realm.json
  #     - ./monitoring/keycloak/keycloak-local-user.sh:/tmp/keycloak-local-user.sh
  #   ports:
  #     - "8080:8080"
  #     - "8443:8443"
  #   # logging:
  #   #     driver: none

  ####################### Postgres Definition #######################
  postgres:
    restart: always
    container_name: mds_postgres
    build:
      context: migrations
      dockerfile: Dockerfile.dev
    environment:
      - POSTGRES_USER=mds
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=mds
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  ####################### Flyway Migration Definition #######################
  flyway:
    container_name: mds_flyway
    build:
      context: migrations
      dockerfile: Dockerfile.flyway.dev
    environment:
      - FLYWAY_USER=mds
      - FLYWAY_HOME=/flyway
      - FLYWAY_PASSWORD=test
      - FLYWAY_DB_NAME=mds
      - FLYWAY_DB_HOST=postgres
      - FLYWAY_URL=jdbc:postgresql://postgres/mds
      - FLYWAY_OUT_OF_ORDER=true
      - FLYWAY_CONNECT_RETRIES=60
      - NRIS_USER_PASSWORD=nris_pass
      - DOCMAN_USER_PASSWORD=docman_pass
      - LOGSTASH_USER_PASSWORD=logstash_pass
      - METABASE_USER_PASSWORD=metabase_pass
    depends_on:
      - postgres

  ####################### Backend Definition #######################
  backend:
    restart: always
    container_name: mds_backend
    build:
      context: services/core-api
    env_file: services/core-api/.env
    ports:
      - 5000:5000
    volumes:
      - ./services/core-api:/app
      - core_api_logs:/var/log/core-api
    depends_on:
      - flyway
      - redis
      - nris_backend
      - document_manager_backend
      - tusd
      - filesystem_provider

  ####################### Redis Definition #######################
  redis:
    image: redis:3.2-alpine
    container_name: mds_cache
    restart: always
    command: redis-server --requirepass redis-password
    ports:
      - "6379:6379"

  ####################### Frontend Definition #######################
  frontend:
    restart: always
    container_name: mds_frontend
    build:
      context: services/core-web
    command: ["npm", "run", "serve"]
    volumes:
      - ./services/core-web/src:/app/src
    ports:
      - 3000:3000
    depends_on:
      - backend
    env_file: ./services/core-web/.env

  minespace:
    restart: always
    container_name: mds_minespace
    build:
      context: services/minespace-web
    command: ["npm", "run", "serve"]
    volumes:
      - ./services/minespace-web/src:/app/src
    ports:
      - 3020:3020
    depends_on:
      - backend
    env_file: ./services/minespace-web/.env

  ####################### NRIS_BACKEND Definition #######################
  nris_backend:
    restart: always
    container_name: nris_python
    build:
      context: services/nris-api/backend
    ports:
      - 5500:5500
    volumes:
      - ./services/nris-api/backend:/app
    depends_on:
      - flyway
      - redis
      - nris_migrate
    env_file: ./services/nris-api/backend/.env

  nris_migrate:
    restart: on-failure
    container_name: nris_migrate
    build:
      dockerfile: Dockerfile.migrate
      context: services/nris-api/backend
    volumes:
      - ./services/nris-api/backend:/app
    depends_on:
      - flyway
      - redis
    env_file: ./services/nris-api/backend/.env

  ####################### TUSD Definition #######################
  tusd:
    container_name: tusd
    build:
      context: services/tusd
    expose:
      - 1080
    env_file: ./services/tusd/.env

  ####################### Syncfusion Filesystem Provider Definition #######################
  filesystem_provider:
    container_name: filesystem_provider
    build:
      context: services/filesystem-provider
    ports:
      - 62870:62870
    env_file: ./services/filesystem-provider/.env

  ####################### DOCUMENT_MANAGER_BACKEND Definition #######################
  document_manager_backend:
    restart: always
    container_name: document_manager_backend
    build:
      context: services/document-manager/backend
    ports:
      - 5001:5001
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
      - document_manager_migrate
      - document_manager_celery
      - tusd
    env_file: ./services/document-manager/backend/.env

  document_manager_celery:
    restart: always
    container_name: document_manager_celery
    build:
      context: services/document-manager/backend
    entrypoint: ./celery.sh
    ports:
      - 5555:5555
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
      - tusd
    env_file: ./services/document-manager/backend/.env

  document_manager_migrate:
    restart: on-failure
    container_name: document_manager_migrate
    build:
      dockerfile: Dockerfile.migrate
      context: services/document-manager/backend
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
    env_file: ./services/document-manager/backend/.env

  ####################### DOCUMENT_GENERATION Definition #######################
  docgen-api:
    restart: always
    container_name: docgen_api
    image: bcgovimages/doc-gen-api:v2.1.3
    command: ["npm", "run", "start"]
    environment:
      - APP_PORT=3030
      - CACHE_DIR=/tmp/tmp-reports
      - NODE_ENV=development
    #volumes:
    #  - ./services/docgen-api/:/carbone-api/
    ports:
      - 3030:3030

  ############################# Container metrics ###########################
  # https://github.com/maheshmahadevan/docker-monitoring-windows
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always

  ############################# Exporters ###################################
  # https://github.com/rongfengliang/redis-exporter-prometheus-docker-compose
  redis_monitoring:
    image: oliver006/redis_exporter:latest
    container_name: mds_cache_monitoring
    command: -redis.addr redis://redis:6379 -redis.password redis-password
    restart: always
    depends_on:
      - redis
    ports:
      - "9121"
  # https://github.com/wrouesnel/postgres_exporter
  postgres_monitoring:
    image: wrouesnel/postgres_exporter
    container_name: mds_postgres_monitoring
    environment:
      - DATA_SOURCE_NAME=postgresql://mds:test@postgres:5432/mds?sslmode=disable
    restart: always
    depends_on:
      - postgres
    ports:
      - "9187"

####################### Networks Definition ######################
networks:
  default:
    driver: "bridge"

####################### Volumes Definition #######################
volumes:
  postgres_data: {}
  core_api_logs: {}
  core_web_logs: {}
