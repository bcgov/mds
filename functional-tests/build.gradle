import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// Shelly's note: setup baseURL env var to take test/dev


plugins {
    id 'com.gradle.build-scan' version '1.16'
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.0"
    id "net.foragerr.jmeter" version "1.0.10-3.3"
    
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "firefoxHeadless", "chrome", "chromeHeadless","ie","edge","safari"]

    ext {
        groovyVersion = '2.4.12'
        gebVersion = '2.1'
        seleniumVersion = '3.6.0'
        chromeDriverVersion = '2.36'
        geckoDriverVersion = '0.18.0'
        ieDriverVersion = '3.6'
        edgeDriverVersion = seleniumVersion
        safariDriverVersion = seleniumVersion
    }
}

apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    mavenCentral()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    //Support
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-edge-driver:$seleniumVersion"

    // Spock reports
    testCompile( 'com.athaydes:spock-reports:1.4.0' ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testCompile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
    //iedriver ieDriverVersion
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver
    }
}

ieTest {
    dependsOn unzipIeDriver

    def iedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "IEDriverServer.exe" : "IEDriverServer"
    systemProperty "webdriver.ie.driver", new File(unzipIeDriver.outputs.files.singleFile, iedriverFilename).absolutePath
}

edgeTest {
    dependsOn unzipEdgeDriver

    def edgedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "MicrosoftWebDriver.exe" : "MicrosoftWebDriver.exe"
    systemProperty "webdriver.edge.driver", new File(unzipEdgeDriver.outputs.files.singleFile,edgedriverFilename).absolutePath
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
    scanForTestClasses = false
    include '**/CustomJUnitSpecRunner*'



}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=512m'
    testLogging {
        exceptionFormat = 'full'
    }
    // Spock Report settings
    systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
    systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.inlineCss', false
    systemProperty 'com.athaydes.spockframework.report.projectName',"MDS-Web"
    systemProperty 'com.athaydes.spockframework.report.projectVersion',"1.0"


    //for individual reports:
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

