version: "3"

services:
  ####################### Postgres Definition #######################
  postgres:
    restart: always
    container_name: mds_postgres
    user: postgres
    build:
      context: services/postgres
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=mds
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=mds
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5

  ####################### Flyway Migration Definition #######################
  flyway:
    container_name: mds_flyway
    build:
      context: migrations
      dockerfile: Dockerfile.flyway.dev
    environment:
      - FLYWAY_USER=mds
      - FLYWAY_HOME=/flyway
      - FLYWAY_PASSWORD=test
      - FLYWAY_DB_NAME=mds
      - FLYWAY_DB_HOST=postgres
      - FLYWAY_URL=jdbc:postgresql://postgres/mds
      - FLYWAY_OUT_OF_ORDER=true
      - FLYWAY_CONNECT_RETRIES=60
      - NRIS_USER_PASSWORD=nris_pass
      - DOCMAN_USER_PASSWORD=docman_pass
      - LOGSTASH_USER_PASSWORD=logstash_pass
      - METABASE_USER_PASSWORD=metabase_pass
      - PLATFORM=LOCAL
    volumes:
      - ./migrations/sql:/flyway/sql
      - ./migrations/scripts:/flyway/scripts
    depends_on:
      - postgres
  ####################### Backend Definition #######################
  backend:
    restart: always
    user: 1000:1000
    container_name: mds_backend
    build:
      context: services/core-api
    env_file: services/core-api/.env
    stdin_open: true
    tty: true
    ports:
      - 5000:5000
    volumes:
      - ./services/core-api:/app
      - core_api_logs:/var/log/core-api
    depends_on:
      - flyway
      - redis
      - nris_backend
      - document_manager_backend
      - core_api_celery
      - tusd
      - filesystem_provider
      - docgen-api
    healthcheck:
      test: [ "CMD", "curl", "localhost:5000/health" ]
      interval: 5s
      timeout: 5s
      retries: 5
  core_api_celery:
    restart: always
    container_name: core_api_celery
    build:
      context: services/core-api
    entrypoint: ./celery.sh
    ports:
      - 5556:5555
    volumes:
      - ./services/core-api:/app
    depends_on:
      - postgres
      - redis
    env_file: ./services/core-api/.env

  ####################### Redis Definition #######################
  redis:
    image: redis:3.2-alpine
    container_name: mds_cache
    restart: always
    command: redis-server --requirepass redis-password
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  ####################### Frontend Definition #######################
  frontend:
    restart: always
    user: 1000:1000
    container_name: mds_frontend
    build:
      context: services/core-web
    command: [ "npm", "run", "serve" ]
    volumes:
      - ./services/core-web/src:/app/src
    ports:
      - 3000:3000
    depends_on:
      - backend
    env_file: ./services/core-web/.env
    healthcheck:
      test: [ "CMD", "curl", "localhost:3000/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  ####################### Minespace Definition #######################
  minespace:
    restart: always
    user: 1000:1000
    container_name: mds_minespace
    build:
      context: services/minespace-web
    command: [ "npm", "run", "serve" ]
    volumes:
      - ./services/minespace-web/src:/app/src
    ports:
      - 3020:3020
    depends_on:
      - backend
    env_file: ./services/minespace-web/.env
    healthcheck:
      test: [ "CMD", "curl", "localhost:3020/health" ]
      interval: 5s
      timeout: 5s
      retries: 5

  ####################### NRIS_BACKEND Definition #######################
  nris_backend:
    restart: always
    container_name: nris_python
    build:
      context: services/nris-api/backend
    ports:
      - 5500:5500
    volumes:
      - ./services/nris-api/backend:/app
    depends_on:
      - flyway
      - redis
      - nris_migrate
    env_file: ./services/nris-api/backend/.env
    healthcheck:
      test: [ "CMD", "curl", "localhost:5500/health" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nris_migrate:
    restart: on-failure
    container_name: nris_migrate
    build:
      dockerfile: Dockerfile.migrate
      context: services/nris-api/backend
    volumes:
      - ./services/nris-api/backend:/app
    depends_on:
      - flyway
      - redis
    env_file: ./services/nris-api/backend/.env

  ####################### TUSD Definition #######################
  tusd:
    container_name: tusd
    build:
      context: services/tusd
    expose:
      - 1080
    env_file: ./services/tusd/.env

  ####################### Syncfusion Filesystem Provider Definition #######################
  filesystem_provider:
    container_name: filesystem_provider
    build:
      context: services/filesystem-provider
    ports:
      - 62870:62870
    env_file: ./services/filesystem-provider/.env

  ####################### DOCUMENT_MANAGER_BACKEND Definition #######################
  document_manager_backend:
    restart: always
    container_name: document_manager_backend
    build:
      context: services/document-manager/backend
    ports:
      - 5001:5001
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
      - document_manager_migrate
      - document_manager_celery
      - tusd
    env_file: ./services/document-manager/backend/.env

  document_manager_celery:
    restart: always
    container_name: document_manager_celery
    build:
      context: services/document-manager/backend
    entrypoint: ./celery.sh
    ports:
      - 5555:5555
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
      - tusd
    env_file: ./services/document-manager/backend/.env

  document_manager_migrate:
    restart: on-failure
    container_name: document_manager_migrate
    build:
      dockerfile: Dockerfile.migrate
      context: services/document-manager/backend
    volumes:
      - ./services/document-manager/backend:/app
    depends_on:
      - postgres
      - redis
    env_file: ./services/document-manager/backend/.env

  ####################### DOCUMENT_GENERATION Definition #######################
  docgen-api:
    restart: always
    container_name: docgen_api
    image: bcgovimages/common-document-generation-service:2.4.1
    command: [ "npm", "run", "start" ]
    environment:
      - SERVER_PORT=3030
      - APP_PORT=3030
      - CACHE_DIR=/tmp/tmp-reports
      - NODE_ENV=development
    ports:
      - 3030:3030

####################### Networks Definition ######################
networks:
  default:
    driver: "bridge"

####################### Volumes Definition #######################
volumes:
  postgres_data: {}
  core_api_logs: {}
  core_web_logs: {}
