#!/bin/bash -e
#
# S2I run script for the 's2i-nginx' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

NGINX_CONF=${NGINX_CONF-/opt/app-root/etc/nginx.conf}

envsubst_config() {
  export DOLAR='$'

  if ls /opt/app-root/etc/nginx.conf.d/*.tmpl > /dev/null 2>&1 ; then
    echo "---> substituting environment variables in templates"
    for file in /opt/app-root/etc/nginx.conf.d/*.tmpl; do
      target_file="/opt/app-root/etc/nginx.conf.d/$(basename "$file" .tmpl)"
      envsubst "`printf '${%s} ' $(bash -c "compgen -A variable")`" < "$file" > "$target_file"
    done
  fi
}

generate_password_files() {
  # This function will iterate through more usernames and passwords if they exist.
  # It will start from USERNAME and PASSWORD, USERNAME1 and PASSWORD1, USERNAME2 and PASSWORD2, etc. 
  # It starts from variable USERNAME and USERNAME instead of USERNAME0 and PASSWORD0
  # to prevent existing builds from breaking.
 
  rm -f -- /tmp/.htpasswd*
  if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
    echo "---> Generating .htpasswd file"
    `echo "$USERNAME:$(openssl passwd -crypt $PASSWORD)" > /tmp/.htpasswd`
  fi
  
  COUNTER=1
  USER=USERNAME$COUNTER
  PASS=PASSWORD$COUNTER
  while [ -n "${!USER}" ] && [ -n "${!PASS}" ]; do
    echo "---> Generating .htpasswd file"
    `echo "${!USER}:$(openssl passwd -crypt ${!PASS})" > /tmp/.htpasswd${COUNTER}`
    let "COUNTER+=1"
    USER=USERNAME$COUNTER
    PASS=PASSWORD$COUNTER
  done
}

envsubst_config
generate_password_files

exec ${NGINX_BASE_DIR}/nginx -c "$NGINX_CONF"
