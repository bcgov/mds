// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProjectSummary renders properly 1`] = `
<div
  className="page"
>
  <div
    className=" padding-lg view--header"
  >
    <h1>
      Sample title
      <span
        className="padding-sm--left"
      >
        <Tag
          title="Mine: undefined"
        >
          <Link
            disabled={false}
            style={
              Object {
                "textDecoration": "none",
              }
            }
            to="/mine-dashboard/60300a07-376c-46f1-a984-88a813f91438/mine-information/general"
          >
            <ForwardRef(EnvironmentOutlined)
              className="padding-sm--right"
            />
          </Link>
        </Tag>
      </span>
    </h1>
    <Link
      to="/mine-dashboard/60300a07-376c-46f1-a984-88a813f91438/permits-and-approvals/pre-applications"
    >
      <ForwardRef(ArrowLeftOutlined)
        className="padding-sm--right"
      />
      Back to: 
       Pre-application submissions
    </Link>
  </div>
  <div
    className="side-menu top-100"
  >
    <withRouter(ProjectSummarySideMenu) />
  </div>
  <Tabs
    activeKey="project-descriptions"
    animated={
      Object {
        "inkBar": true,
        "tabPane": false,
      }
    }
    centered={true}
    className="now-tabs"
    size="large"
    style={
      Object {
        "margin": "0",
      }
    }
  >
    <TabPane
      key="project-descriptions"
      tab="Project Descriptions"
    >
      <LoadingWrapper
        condition={false}
      >
        <div
          className="side-menu--content"
        >
          <ReduxForm
            destroyOnUnmount={true}
            enableReinitialize={true}
            fetchProjectSummaryById={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "testMineGuid",
                    "testProjectSummaryGuid",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              }
            }
            forceUnregisterOnUnmount={false}
            form="PROJECT_SUMMARY"
            formattedProjectSummary={
              Object {
                "contacts": Array [],
                "documents": Array [],
                "expected_draft_irt_submission_date": "2020-11-10T22:18:19+00:00",
                "expected_permit_application_date": "2020-11-12T22:18:19+00:00",
                "expected_permit_receipt_date": "2020-11-20T22:18:19+00:00",
                "expected_project_start_date": "2020-11-22T22:18:19+00:00",
                "mine_guid": "60300a07-376c-46f1-a984-88a813f91438",
                "project_summary_description": "Sample description",
                "project_summary_guid": "81324623978135",
                "project_summary_title": "Sample title",
                "proponent_project_id": "25789-x",
                "status_code": "OPN",
              }
            }
            getFormState={[Function]}
            initialValues={
              Object {
                "contacts": Array [],
                "documents": Array [],
                "expected_draft_irt_submission_date": "2020-11-10T22:18:19+00:00",
                "expected_permit_application_date": "2020-11-12T22:18:19+00:00",
                "expected_permit_receipt_date": "2020-11-20T22:18:19+00:00",
                "expected_project_start_date": "2020-11-22T22:18:19+00:00",
                "mine_guid": "60300a07-376c-46f1-a984-88a813f91438",
                "project_summary_description": "Sample description",
                "project_summary_guid": "81324623978135",
                "project_summary_title": "Sample title",
                "proponent_project_id": "25789-x",
                "status_code": "OPN",
              }
            }
            keepDirtyOnReinitialize={false}
            match={
              Object {
                "params": Object {
                  "mineGuid": "testMineGuid",
                  "projectSummaryGuid": "testProjectSummaryGuid",
                },
              }
            }
            persistentSubmitErrors={false}
            projectSummary={
              Object {
                "contacts": Array [],
                "documents": Array [],
                "expected_draft_irt_submission_date": "2020-11-10T22:18:19+00:00",
                "expected_permit_application_date": "2020-11-12T22:18:19+00:00",
                "expected_permit_receipt_date": "2020-11-20T22:18:19+00:00",
                "expected_project_start_date": "2020-11-22T22:18:19+00:00",
                "mine_guid": "60300a07-376c-46f1-a984-88a813f91438",
                "project_summary_description": "Sample description",
                "project_summary_guid": "81324623978135",
                "project_summary_title": "Sample title",
                "proponent_project_id": "25789-x",
                "status_code": "OPN",
              }
            }
            projectSummaryAuthorizationTypesHash={
              Object {
                "AIR_EMISSIONS_DISCHARGE_PERMIT": "Air emissions discharge permit",
                "CHANGE_APPROVAL": "Change approval",
                "EFFLUENT_DISCHARGE_PERMIT": "Effluent discharge permit",
                "ENVIRONMENTAL_MANAGMENT_ACT": "Environmental Management Act",
                "FORESTRY_ACT": "Forestry Act",
                "MINES_ACT": "Mines Act",
                "MINES_ACT_PERMIT": "Mines Act permit",
                "MUNICIPAL_WASTEWATER_REGULATION": "Municipal wastewater regulation",
                "OCCUPANT_CUT_LICENCE": "Occupant licence to cut",
                "OTHER": "Other legislation",
                "OTHER_LEGISLATION": "Other legislation",
                "SOLID_WASTES_PERMIT": "Solid wastes permit",
                "USE_APPROVAL": "Use approval",
                "WATER_LICENCE": "Water licence",
                "WATER_SUSTAINABILITY_ACT": "Water Sustainability Act",
              }
            }
            projectSummaryDocumentTypesHash={
              Object {
                "GEN": "General",
              }
            }
            projectSummaryPermitTypesHash={
              Object {
                "AMENDMENT": "Amendment to an existing permit",
                "CLOSURE": "Closure of an existing permit",
                "NEW": "New",
                "NOTIFICATION": "Notification",
                "OTHER": "Other",
              }
            }
            projectSummaryStatusCodesHash={
              Object {
                "CLD": "Closed",
                "DFT": "Draft",
                "OPN": "Open",
                "WDN": "Withdrawn",
              }
            }
            pure={true}
            shouldAsyncValidate={[Function]}
            shouldError={[Function]}
            shouldValidate={[Function]}
            shouldWarn={[Function]}
            submitAsSideEffect={false}
            touchOnBlur={true}
            touchOnChange={false}
            updateUnregisteredFields={false}
          />
        </div>
      </LoadingWrapper>
    </TabPane>
  </Tabs>
</div>
`;
