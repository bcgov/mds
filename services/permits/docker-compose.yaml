services:

  nlm-ingestor:
    container_name: nlm_ingestor
    image: ghcr.io/nlmatics/nlm-ingestor:latest
    ports:
      - 5010:5001
  
  haystack:
    container_name: haystack
    build:
      context: './'
      dockerfile: './Dockerfile'
    volumes:
      - ./:/opt/pipelines
      - ./:/code
      - fileuploads:/file-uploads
      - certs:/permitsdata/certs
    ports:
      - 8004:80
    restart: on-failure
    environment:
      - DOCUMENTSTORE_PARAMS_HOST=elasticsearch
      - TOKENIZERS_PARALLELISM=false
      - ROOT_PATH=/haystack
      - FILE_UPLOAD_PATH=/file-uploads
      - HAYSTACK_TELEMETRY_ENABLED=False
      - ELASTICSEARCH_CA_CERT=/permitsdata/certs/ca/ca.crt
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
  haystack_celery:
    container_name: haystack_celery
    build:
      context: './'
      dockerfile: './Dockerfile'
    volumes:
      - ./:/opt/pipelines
      - ./:/code
      - fileuploads:/file-uploads
      - certs:/permitsdata/certs
    command: >-
      python -m watchdog.watchmedo auto-restart
      -d app/ -p '*.py' --recursive --
      celery -A app.celery worker --loglevel=info -n permit_service@%h --concurrency=1 -Q permits
    restart: on-failure
    environment:
      - DOCUMENTSTORE_PARAMS_HOST=elasticsearch
      - TOKENIZERS_PARALLELISM=false
      - ROOT_PATH=/haystack
      - FILE_UPLOAD_PATH=/file-uploads
      - HAYSTACK_TELEMETRY_ENABLED=False
      - ELASTICSEARCH_CA_CERT=/permitsdata/certs/ca/ca.crt

    depends_on:
      kibana:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      haystack:
        condition: service_started
      redis:
        condition: service_started
  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    command: >
      bash -c '
      ### 1. Create CA and certificates for elasticsearch.
      ### 2. Wait for elasticsearch to spin up
      ### 3. Set a password for the `kibana_system` so it can connect to elasticsearch

      if [ ! -f /certs/ca.zip ]; then
        echo "Creating CA";
        bin/elasticsearch-certutil ca --silent --pem -out /certs/ca.zip;
        unzip /certs/ca.zip -d /certs;
      fi;

      if [[ ! -f /certs/bundle.zip ]]; then
          cat << EOF >> instances.yml
          instances:
            - name: elasticsearch
              dns:
                - elasticsearch 
                - localhost
              ip:
                - 127.0.0.1
      EOF
          bin/elasticsearch-certutil cert --silent --pem -out /certs/bundle.zip --in instances.yml --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key;
          unzip /certs/bundle.zip -d /certs; 
        fi;
        echo "Setting file permissions"
        chown -R root:root /certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert /certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert /certs/ca/ca.crt -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${ELASTICSEARCH_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['certs:/certs']
    healthcheck:
      test: ["CMD-SHELL", "[ -f /certs/elasticsearch/elasticsearch.crt ]"]
      timeout: 5s
      retries: 120

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:8.12.1"
    container_name: elasticsearch
    ports:
      - 9200:9200
    restart: on-failure
    environment:
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - discovery.type=single-node
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
      - node.name=elasticsearch
      - cluster.name=elasticsearch
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.enabled="true"
      - xpack.security.transport.ssl.enabled="true"
      - xpack.security.http.ssl.enabled="true"
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt

    volumes:
      - esdata01:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

    depends_on:
      create_certs:
        condition: service_healthy
  kibana:
    image: "docker.elastic.co/kibana/kibana:8.12.1"
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    container_name: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    environment:
     - SERVERNAME=kibana
     - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
networks:
  default:
    driver: "bridge"

volumes:
  certs:
  fileuploads:
  kibanadata:
  esdata01:
    driver: local
