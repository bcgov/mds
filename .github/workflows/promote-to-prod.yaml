name: Promote to prod

on:
  workflow_dispatch:

env:
  ORIG_TAG: test
  PROMOTE_TAG: prod

jobs:
  initiate:
    name: initiate
    runs-on: ubuntu-20.04
    environment:
      name: production
    steps:
      - name: Waiting for approval
        run: |
          echo "Starting prod promotion..."

  promote-to-prod:
    needs: initiate
    name: promote-to-prod
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: flyway
          - name: tusd
          - name: dbbackup
          - name: metabase
          - name: metabase-postgres
          - name: docman
          - name: nris
          - name: schemaspy
    steps:
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.7"
      - name: oc login
        run: |
          oc login --token=${{ secrets.BUILD_TOKEN }} --server=${{ secrets.CLUSTER_API }}
      - name: Promote test to prod
        run: |
          oc -n ${{secrets.NS_TOOLS}} tag \
          ${{ secrets.NS_TOOLS }}/${{ matrix.name }}:${{ env.ORIG_TAG }} \
          ${{ secrets.NS_TOOLS }}/${{ matrix.name }}:${{ env.PROMOTE_TAG }}

  grace-period:
    name: grace-period
    runs-on: ubuntu-20.04
    needs: promote-to-prod
    steps:
      - name: Waiting grace period
        run: |
          echo "Grace period..."
          sleep 10

  watch-rollout:
    name: watch-rollout
    runs-on: ubuntu-20.04
    needs: grace-period
    timeout-minutes: 25
    strategy:
      matrix:
        include:
          - name: frontend
          - name: dbbackup
          - name: metabase
          - name: metabase-postgres
          - name: docman
          - name: nris
    steps:
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.7"
      - name: oc login
        run: |
          oc login --token=${{ secrets.BUILD_TOKEN }} --server=${{ secrets.CLUSTER_API }}
      - name: Watch rollout
        run: |
          until [ "$(oc -n ${{ secrets.NS_PROD }} get dc ${{ matrix.name }} -o=jsonpath="{$.status.conditions[*].message}" --no-headers=false | grep -i 'successfully rolled out')" != "" ]; do
              echo "Waiting on: $(oc -n ${{ secrets.NS_PROD }} get dc ${{ matrix.name }} -o name --no-headers=false) ..."
              sleep 10
          done
          echo "Deployment complete"
