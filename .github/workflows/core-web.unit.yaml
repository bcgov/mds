name: CORE WEB - Unit Tests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - services/common/**
      - services/core-web/**

jobs:
  tests-unit-frontend:
    name: tests-unit-frontend
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        name: checkout
      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.22.0"
      - name: Login
        run: |
          docker login -u ${{ secrets.CLUSTER_REGISTRY_USER }} -p ${{ secrets.BUILD_TOKEN }} ${{ secrets.CLUSTER_REGISTRY }}

      - uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Upgrade yarn
        run: npm install -g yarn

      - name: Set Fontawesome token
        run: |
          yarn config set 'npmScopes["fortawesome"].npmAuthIdent' "${{ secrets.ARTIFACTORY_TOKEN }}"
          yarn config set 'npmScopes["fortawesome"].npmAlwaysAuth' true
          yarn config set 'npmScopes["fortawesome"].npmRegistryServer' "https://artifacts.developer.gov.bc.ca/artifactory/api/npm/m4c2-mds/"

      - name: Install Dependencies
        run: yarn install

      # - name: Run frontend tests
      #   run: cd services/core-web/ && yarn && yarn test
      - name: Run Migrations
        env:
          DOCKER_BUILDKIT: 1
        run: docker-compose -f docker-compose.ci.yaml up -e FLYWAY_DB_NAME=mds --force-recreate --exit-code-from flyway flyway

      - name: Create containers for integration tests
        env:
          DOCKER_BUILDKIT: 1
        run: docker-compose -f docker-compose.ci.yaml up -d backend
      - name: build-core-web
        run: |
          NODE_OPTIONS=--max-old-space-size=5024 yarn workspace @mds/core-web build

      - name: start-core-web
        run: yarn workspace @mds/core-web run http-server-spa build /index.html 3000 &

      - name: Run cypress tests
        run: yarn workspace @mds/core-web cypress run
        env:
          CYPRESS_TEST_USER: ${{ secrets.CYPRESS_CORE_USER }}
          CYPRESS_TEST_PASSWORD: ${{ secrets.CYPRESS_CORE_PASSWORD }}
          CYPRESS_CORE_WEB_TEST_URL: ${{ secrets.CYPRESS_CORE_WEB_TEST_URL }}
          CYPRESS_BACKEND: ${{ secrets.CYPRESS_BACKEND }}
          CYPRESS_API_URL: "http://localhost:5000"
          CYPRESS_KEYCLOAK_URL: ${{ secrets.CYPRESS_KEYCLOAK_URL }}
          CYPRESS_ENVIRONMENT: ${{ secrets.CYPRESS_ENVIRONMENT }}
          CYPRESS_DOC_MAN_URL: ${{ secrets.CYPRESS_DOC_MAN_URL }}
          CYPRESS_FILE_SYSTEM_PROVIDER_URL: ${{ secrets.CYPRESS_FILE_SYSTEM_PROVIDER_URL }}
          CYPRESS_MATOMO_URL: ${{ secrets.CYPRESS_MATOMO_URL }}
          CYPRESS_KEYCLOAK_CLIENT_ID: ${{ secrets.CYPRESS_KEYCLOAK_CLIENT_ID }}
          CYPRESS_KEYCLOAK_IDP_HINT: ${{ secrets.CYPRESS_KEYCLOAK_IDP_HINT }}
          CYPRESS_KEYCLOAK_RESOURCE: ${{ secrets.CYPRESS_KEYCLOAK_RESOURCE }}
          CYPRESS_FLAGSMITH_URL: ${{ secrets.CYPRESS_FLAGSMITH_URL }}
          CYPRESS_FLAGSMITH_KEY: ${{ secrets.CYPRESS_FLAGSMITH_KEY }}
      - name: Upload cypress video
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-recording
          path: services/core-web/cypress/videos
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: "./logs"
      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: logs.tgz
          path: ./logs.tgz
  run-sonar-scan:
    name: Run SonarCloud Scan
    if: success()
    uses: ./.github/workflows/sonarcloud-scan.yaml
    with:
      project-dir: services/core-web
    secrets: inherit
