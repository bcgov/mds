// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthorizationGuard should render the \`WrappedComponent\` if \`userRoles === role_edit_mines || role_admin\` 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <authorizationGuard
    keycloak={Object {}}
    logoutUser={[MockFunction]}
    mapStateToProps={[MockFunction]}
    userRoles={
      Array [
        "core_view_all",
        "idir",
        "core_edit_mines",
        "offline_access",
        "admin",
        "uma_authorization",
        "core_admin",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "keycloak": Object {},
      "logoutUser": [MockFunction],
      "mapStateToProps": [MockFunction],
      "userRoles": Array [
        "core_view_all",
        "idir",
        "core_edit_mines",
        "offline_access",
        "admin",
        "uma_authorization",
        "core_admin",
      ],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "keycloak": Object {},
        "logoutUser": [MockFunction],
        "mapStateToProps": [MockFunction],
        "userRoles": Array [
          "core_view_all",
          "idir",
          "core_edit_mines",
          "offline_access",
          "admin",
          "uma_authorization",
          "core_admin",
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
