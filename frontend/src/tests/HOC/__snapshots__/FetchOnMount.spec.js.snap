// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FetchOnMount should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <fetchOnMount
    fetchApplicationStatusOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchExpectedDocumentStatusOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineCommodityOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineComplianceCodes={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineDisturbanceOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineIncidentDeterminationOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineIncidentFollowActionOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineTailingsRequiredDocuments={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchMineTenureTypes={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchPartyRelationshipTypes={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchPermitStatusOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchProvinceCodes={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchRegionOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchStatusOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    fetchVarianceStatusOptions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "fetchApplicationStatusOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchExpectedDocumentStatusOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineCommodityOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineComplianceCodes": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineDisturbanceOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineIncidentDeterminationOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineIncidentFollowActionOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineTailingsRequiredDocuments": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchMineTenureTypes": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchPartyRelationshipTypes": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchPermitStatusOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchProvinceCodes": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchRegionOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchStatusOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
      "fetchVarianceStatusOptions": [MockFunction] {
        "calls": Array [
          Array [],
        ],
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "fetchApplicationStatusOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchExpectedDocumentStatusOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineCommodityOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineComplianceCodes": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineDisturbanceOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineIncidentDeterminationOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineIncidentFollowActionOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineTailingsRequiredDocuments": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchMineTenureTypes": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchPartyRelationshipTypes": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchPermitStatusOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchProvinceCodes": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchRegionOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchStatusOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "fetchVarianceStatusOptions": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
