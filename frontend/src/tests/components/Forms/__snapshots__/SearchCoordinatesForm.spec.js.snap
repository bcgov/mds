// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchCoordinatesForm renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchCoordinatesForm
    handleSubmit={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <FormItem
          colon={true}
          hasFeedback={false}
          prefixCls="ant-form"
        >
          <Field
            component={[Function]}
            id="latitude"
            name="latitude"
            placeholder="Latitude"
            validate={
              Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ]
            }
          />
        </FormItem>,
        <FormItem
          colon={true}
          hasFeedback={false}
          prefixCls="ant-form"
        >
          <Field
            component={[Function]}
            id="longitude"
            name="longitude"
            placeholder="Longitude"
            validate={
              Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ]
            }
          />
        </FormItem>,
        <div
          className="right center-mobile"
        >
          <Button
            block={false}
            className="full-mobile"
            ghost={false}
            htmlType="submit"
            loading={false}
            prefixCls="ant-btn"
            type="primary"
          >
            <Icon
              type="search"
            />
          </Button>
        </div>,
      ],
      "hideRequiredMark": false,
      "layout": "vertical",
      "onSubmit": [MockFunction],
      "prefixCls": "ant-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            id="latitude"
            name="latitude"
            placeholder="Latitude"
            validate={
              Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ]
            }
          />,
          "colon": true,
          "hasFeedback": false,
          "prefixCls": "ant-form",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "id": "latitude",
            "name": "latitude",
            "placeholder": "Latitude",
            "validate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            id="longitude"
            name="longitude"
            placeholder="Longitude"
            validate={
              Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ]
            }
          />,
          "colon": true,
          "hasFeedback": false,
          "prefixCls": "ant-form",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "id": "longitude",
            "name": "longitude",
            "placeholder": "Longitude",
            "validate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Button
            block={false}
            className="full-mobile"
            ghost={false}
            htmlType="submit"
            loading={false}
            prefixCls="ant-btn"
            type="primary"
          >
            <Icon
              type="search"
            />
          </Button>,
          "className": "right center-mobile",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "block": false,
            "children": <Icon
              type="search"
            />,
            "className": "full-mobile",
            "ghost": false,
            "htmlType": "submit",
            "loading": false,
            "prefixCls": "ant-btn",
            "type": "primary",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "type": "search",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <FormItem
            colon={true}
            hasFeedback={false}
            prefixCls="ant-form"
          >
            <Field
              component={[Function]}
              id="latitude"
              name="latitude"
              placeholder="Latitude"
              validate={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
            />
          </FormItem>,
          <FormItem
            colon={true}
            hasFeedback={false}
            prefixCls="ant-form"
          >
            <Field
              component={[Function]}
              id="longitude"
              name="longitude"
              placeholder="Longitude"
              validate={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
            />
          </FormItem>,
          <div
            className="right center-mobile"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="submit"
              loading={false}
              prefixCls="ant-btn"
              type="primary"
            >
              <Icon
                type="search"
              />
            </Button>
          </div>,
        ],
        "hideRequiredMark": false,
        "layout": "vertical",
        "onSubmit": [MockFunction],
        "prefixCls": "ant-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              id="latitude"
              name="latitude"
              placeholder="Latitude"
              validate={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
            />,
            "colon": true,
            "hasFeedback": false,
            "prefixCls": "ant-form",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "latitude",
              "name": "latitude",
              "placeholder": "Latitude",
              "validate": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              id="longitude"
              name="longitude"
              placeholder="Longitude"
              validate={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
            />,
            "colon": true,
            "hasFeedback": false,
            "prefixCls": "ant-form",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "longitude",
              "name": "longitude",
              "placeholder": "Longitude",
              "validate": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="submit"
              loading={false}
              prefixCls="ant-btn"
              type="primary"
            >
              <Icon
                type="search"
              />
            </Button>,
            "className": "right center-mobile",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": <Icon
                type="search"
              />,
              "className": "full-mobile",
              "ghost": false,
              "htmlType": "submit",
              "loading": false,
              "prefixCls": "ant-btn",
              "type": "primary",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "type": "search",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
