// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddTenureNumberForm renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddTenureNumberForm
    closeModal={[MockFunction]}
    handleSubmit={[MockFunction]}
    submitting={false}
    title="mockTitle"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              colon={true}
              hasFeedback={false}
              prefixCls="ant-form"
            >
              <Field
                component={[Function]}
                id="tenure_number_id"
                label="Tenure Number"
                name="tenure_number_id"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <div
          className="right center-mobile"
        >
          <Popconfirm
            cancelText="No"
            icon={
              <Icon
                theme="filled"
                type="exclamation-circle"
              />
            }
            okText="Yes"
            okType="primary"
            onConfirm={[MockFunction]}
            placement="topRight"
            prefixCls="ant-popover"
            title="Are you sure you want to cancel?"
            transitionName="zoom-big"
            trigger="click"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              loading={false}
              prefixCls="ant-btn"
              type="secondary"
            >
              Cancel
            </Button>
          </Popconfirm>
          <Button
            block={false}
            className="full-mobile"
            disabled={false}
            ghost={false}
            htmlType="submit"
            loading={false}
            prefixCls="ant-btn"
            type="primary"
          >
            mockTitle
          </Button>
        </div>,
      ],
      "hideRequiredMark": false,
      "layout": "vertical",
      "onSubmit": [MockFunction],
      "prefixCls": "ant-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              colon={true}
              hasFeedback={false}
              prefixCls="ant-form"
            >
              <Field
                component={[Function]}
                id="tenure_number_id"
                label="Tenure Number"
                name="tenure_number_id"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              colon={true}
              hasFeedback={false}
              prefixCls="ant-form"
            >
              <Field
                component={[Function]}
                id="tenure_number_id"
                label="Tenure Number"
                name="tenure_number_id"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                id="tenure_number_id"
                label="Tenure Number"
                name="tenure_number_id"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />,
              "colon": true,
              "hasFeedback": false,
              "prefixCls": "ant-form",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "tenure_number_id",
                "label": "Tenure Number",
                "name": "tenure_number_id",
                "validate": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              prefixCls="ant-popover"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                prefixCls="ant-btn"
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>,
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              prefixCls="ant-btn"
              type="primary"
            >
              mockTitle
            </Button>,
          ],
          "className": "right center-mobile",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "cancelText": "No",
              "children": <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                prefixCls="ant-btn"
                type="secondary"
              >
                Cancel
              </Button>,
              "icon": <Icon
                theme="filled"
                type="exclamation-circle"
              />,
              "okText": "Yes",
              "okType": "primary",
              "onConfirm": [MockFunction],
              "placement": "topRight",
              "prefixCls": "ant-popover",
              "title": "Are you sure you want to cancel?",
              "transitionName": "zoom-big",
              "trigger": "click",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "Cancel",
                "className": "full-mobile",
                "ghost": false,
                "loading": false,
                "prefixCls": "ant-btn",
                "type": "secondary",
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": "mockTitle",
              "className": "full-mobile",
              "disabled": false,
              "ghost": false,
              "htmlType": "submit",
              "loading": false,
              "prefixCls": "ant-btn",
              "type": "primary",
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                colon={true}
                hasFeedback={false}
                prefixCls="ant-form"
              >
                <Field
                  component={[Function]}
                  id="tenure_number_id"
                  label="Tenure Number"
                  name="tenure_number_id"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <div
            className="right center-mobile"
          >
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              prefixCls="ant-popover"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                prefixCls="ant-btn"
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              prefixCls="ant-btn"
              type="primary"
            >
              mockTitle
            </Button>
          </div>,
        ],
        "hideRequiredMark": false,
        "layout": "vertical",
        "onSubmit": [MockFunction],
        "prefixCls": "ant-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                colon={true}
                hasFeedback={false}
                prefixCls="ant-form"
              >
                <Field
                  component={[Function]}
                  id="tenure_number_id"
                  label="Tenure Number"
                  name="tenure_number_id"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                colon={true}
                hasFeedback={false}
                prefixCls="ant-form"
              >
                <Field
                  component={[Function]}
                  id="tenure_number_id"
                  label="Tenure Number"
                  name="tenure_number_id"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="tenure_number_id"
                  label="Tenure Number"
                  name="tenure_number_id"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />,
                "colon": true,
                "hasFeedback": false,
                "prefixCls": "ant-form",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "tenure_number_id",
                  "label": "Tenure Number",
                  "name": "tenure_number_id",
                  "validate": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Popconfirm
                cancelText="No"
                icon={
                  <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />
                }
                okText="Yes"
                okType="primary"
                onConfirm={[MockFunction]}
                placement="topRight"
                prefixCls="ant-popover"
                title="Are you sure you want to cancel?"
                transitionName="zoom-big"
                trigger="click"
              >
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  prefixCls="ant-btn"
                  type="secondary"
                >
                  Cancel
                </Button>
              </Popconfirm>,
              <Button
                block={false}
                className="full-mobile"
                disabled={false}
                ghost={false}
                htmlType="submit"
                loading={false}
                prefixCls="ant-btn"
                type="primary"
              >
                mockTitle
              </Button>,
            ],
            "className": "right center-mobile",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelText": "No",
                "children": <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  prefixCls="ant-btn"
                  type="secondary"
                >
                  Cancel
                </Button>,
                "icon": <Icon
                  theme="filled"
                  type="exclamation-circle"
                />,
                "okText": "Yes",
                "okType": "primary",
                "onConfirm": [MockFunction],
                "placement": "topRight",
                "prefixCls": "ant-popover",
                "title": "Are you sure you want to cancel?",
                "transitionName": "zoom-big",
                "trigger": "click",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Cancel",
                  "className": "full-mobile",
                  "ghost": false,
                  "loading": false,
                  "prefixCls": "ant-btn",
                  "type": "secondary",
                },
                "ref": null,
                "rendered": "Cancel",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "mockTitle",
                "className": "full-mobile",
                "disabled": false,
                "ghost": false,
                "htmlType": "submit",
                "loading": false,
                "prefixCls": "ant-btn",
                "type": "primary",
              },
              "ref": null,
              "rendered": "mockTitle",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
