// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MineRecordForm renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MineRecordForm
    change={[MockFunction]}
    closeModal={[MockFunction]}
    conditionalCommodityOptions={undefined}
    conditionalDisturbanceOptions={
      Object {
        "BCL": Array [
          Object {
            "exclusive": false,
            "label": "Surface",
            "value": "SUR",
          },
        ],
        "COL": Array [
          Object {
            "exclusive": false,
            "label": "Surface",
            "value": "SUR",
          },
          Object {
            "exclusive": false,
            "label": "Underground",
            "value": "UND",
          },
          Object {
            "exclusive": true,
            "label": "Coal Wash",
            "value": "CWA",
          },
        ],
        "MIN": Array [
          Object {
            "exclusive": false,
            "label": "Surface",
            "value": "SUR",
          },
          Object {
            "exclusive": false,
            "label": "Underground",
            "value": "UND",
          },
        ],
        "PLR": Array [
          Object {
            "exclusive": false,
            "label": "Surface",
            "value": "SUR",
          },
          Object {
            "exclusive": false,
            "label": "Underground",
            "value": "UND",
          },
          Object {
            "exclusive": true,
            "label": "Mill",
            "value": "MIL",
          },
        ],
      }
    }
    currentMineTypes={
      Array [
        Object {
          "mine_commodity_code": Array [],
          "mine_disturbance_code": Array [],
          "mine_tenure_type_code": Array [],
        },
      ]
    }
    handleDelete={[MockFunction]}
    handleSubmit={[MockFunction]}
    mineCommodityOptionsHash={
      Object {
        "CG": "Construction Aggregate",
        "MC": "Metallurgic",
        "TO": "Thermal Coal",
      }
    }
    mineDisturbanceOptionsHash={
      Object {
        "CWA": "Coal Wash",
        "MIL": "Mill",
        "SUR": "Surface",
        "UND": "Underground",
      }
    }
    mineRegionOptions={
      Array [
        Object {
          "label": "South West",
          "value": "SW",
        },
        Object {
          "label": "South Central",
          "value": "SC",
        },
        Object {
          "label": "North West",
          "value": "NW",
        },
        Object {
          "label": "North East",
          "value": "NE",
        },
        Object {
          "label": "South East",
          "value": "SE",
        },
      ]
    }
    mineStatus={Array []}
    mineStatusOptions={
      Array [
        Object {
          "mine_operation_status": Object {
            "description": "Abandoned",
            "mine_operation_status_code": "ABN",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "d5c1d966-04ef-4bdb-b7b7-feaead5cf836",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "d6ab34fd-d903-4eac-bdf5-65cf8009b8e9",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Care & Maintenance",
            "mine_operation_status_reason_code": "CM",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "251dc078-bb13-4cb9-b6dd-81310b9cb864",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance",
            "mine_operation_status_sub_reason_code": "LTM",
          },
          "mine_status_xref_guid": "0d85c5b2-2cc1-4e2e-8caa-33a6504d3032",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance & Water Treatment",
            "mine_operation_status_sub_reason_code": "LWT",
          },
          "mine_status_xref_guid": "acc1195c-81e9-475a-8653-e58cc4893794",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Permit Release Pending",
            "mine_operation_status_sub_reason_code": "PRP",
          },
          "mine_status_xref_guid": "e3bdc022-43ff-40c9-8807-dc93779362b3",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance",
            "mine_operation_status_sub_reason_code": "LTM",
          },
          "mine_status_xref_guid": "c9c490f7-d7fd-41fe-9409-e0218edff065",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance & Water Treatment",
            "mine_operation_status_sub_reason_code": "LWT",
          },
          "mine_status_xref_guid": "1b30ddaa-9573-4c3f-9e4e-d83eddf52736",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Reclamation Not Started",
            "mine_operation_status_sub_reason_code": "RNS",
          },
          "mine_status_xref_guid": "6c6ed5d7-f251-4533-976a-df54013d08d5",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Site Visit Required",
            "mine_operation_status_sub_reason_code": "SVR",
          },
          "mine_status_xref_guid": "2d12f1cd-b49c-4cd6-9c46-b53516128ce9",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Unknown",
            "mine_operation_status_reason_code": "UN",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "0b414d87-b703-4d82-8926-b6cb057944e4",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Not Started",
            "mine_operation_status_code": "NS",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "fbdadfd6-b9ac-4483-b6e7-a36d1bb41a1d",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Operating",
            "mine_operation_status_code": "OP",
          },
          "mine_operation_status_reason": Object {
            "description": "Year round",
            "mine_operation_status_reason_code": "YR",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "578abd0e-02e8-4a0a-8959-750e8c99cbb5",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Operating",
            "mine_operation_status_code": "OP",
          },
          "mine_operation_status_reason": Object {
            "description": "Seasonal",
            "mine_operation_status_reason_code": "SEA",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "3eed5e61-1bbb-4d98-99e9-4eb3c0e8b507",
        },
      ]
    }
    mineTenureHash={
      Object {
        "BCL": "BC Land",
        "COL": "Coal",
        "MIN": "Mineral",
        "PLR": "Placer",
      }
    }
    mineTenureTypes={
      Array [
        Object {
          "label": "Coal",
          "value": "COL",
        },
        Object {
          "label": "Mineral",
          "value": "MIN",
        },
        Object {
          "label": "Placer",
          "value": "PLR",
        },
        Object {
          "label": "BC Land",
          "value": "BCL",
        },
      ]
    }
    mine_types={
      Array [
        Object {
          "mine_commodity_code": Array [],
          "mine_disturbance_code": Array [],
          "mine_tenure_type_code": Array [],
        },
      ]
    }
    submitting={false}
    title="mockTitle"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_name"
                label="Mine Name *"
                name="mine_name"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_status"
                label="Mine Status *"
                name="mine_status"
                options={undefined}
                placeholder="Please select status"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              hasFeedback={false}
              label="Date of Status Change"
            >
              <p
                className="p-light"
              >
                The date will default to todays date, unless otherwise specified.
              </p>
              <Field
                component={[Function]}
                id="status_date"
                name="status_date"
                placeholder="yyyy-mm-dd"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <Row
          gutter={16}
        >
          <Col
            span={24}
          >
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                data={
                  Array [
                    Object {
                      "label": "South West",
                      "value": "SW",
                    },
                    Object {
                      "label": "South Central",
                      "value": "SC",
                    },
                    Object {
                      "label": "North West",
                      "value": "NW",
                    },
                    Object {
                      "label": "North East",
                      "value": "NE",
                    },
                    Object {
                      "label": "South East",
                      "value": "SE",
                    },
                  ]
                }
                id="mine_region"
                label="Mine Region *"
                name="mine_region"
                placeholder="Select a Region"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <Row
          gutter={16}
        >
          <Col
            md={12}
            xs={24}
          >
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="latitude"
                label="Latitude"
                name="latitude"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
          <Col
            md={12}
            xs={24}
          >
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="longitude"
                label="Longitude"
                name="longitude"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <FormItem
          hasFeedback={false}
          label="Mine Type"
        />,
        <FieldArray
          component={[Function]}
          name="mine_types"
        />,
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_note"
                label="Notes"
                name="mine_note"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <Row
          gutter={16}
        >
          <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="major_mine_ind"
                label="Major Mine"
                name="major_mine_ind"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>
        </Row>,
        <div
          className="right center-mobile"
        >
          <Popconfirm
            cancelText="No"
            icon={
              <Icon
                theme="filled"
                type="exclamation-circle"
              />
            }
            okText="Yes"
            okType="primary"
            onConfirm={[MockFunction]}
            placement="topRight"
            title="Are you sure you want to cancel?"
            transitionName="zoom-big"
            trigger="click"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="button"
              loading={false}
            >
              Cancel
            </Button>
          </Popconfirm>
          <Button
            block={false}
            className="full-mobile"
            disabled={false}
            ghost={false}
            htmlType="submit"
            loading={false}
            type="primary"
          >
            mockTitle
          </Button>
        </div>,
      ],
      "colon": true,
      "hideRequiredMark": false,
      "layout": "vertical",
      "onSubmit": [MockFunction],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_name"
                label="Mine Name *"
                name="mine_name"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_name"
                label="Mine Name *"
                name="mine_name"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                id="mine_name"
                label="Mine Name *"
                name="mine_name"
                validate={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              />,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "mine_name",
                "label": "Mine Name *",
                "name": "mine_name",
                "validate": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_status"
                label="Mine Status *"
                name="mine_status"
                options={undefined}
                placeholder="Please select status"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_status"
                label="Mine Status *"
                name="mine_status"
                options={undefined}
                placeholder="Please select status"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                id="mine_status"
                label="Mine Status *"
                name="mine_status"
                options={undefined}
                placeholder="Please select status"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "mine_status",
                "label": "Mine Status *",
                "name": "mine_status",
                "options": undefined,
                "placeholder": "Please select status",
                "validate": Array [
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              hasFeedback={false}
              label="Date of Status Change"
            >
              <p
                className="p-light"
              >
                The date will default to todays date, unless otherwise specified.
              </p>
              <Field
                component={[Function]}
                id="status_date"
                name="status_date"
                placeholder="yyyy-mm-dd"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
              label="Date of Status Change"
            >
              <p
                className="p-light"
              >
                The date will default to todays date, unless otherwise specified.
              </p>
              <Field
                component={[Function]}
                id="status_date"
                name="status_date"
                placeholder="yyyy-mm-dd"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <p
                  className="p-light"
                >
                  The date will default to todays date, unless otherwise specified.
                </p>,
                <Field
                  component={[Function]}
                  id="status_date"
                  name="status_date"
                  placeholder="yyyy-mm-dd"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />,
              ],
              "hasFeedback": false,
              "label": "Date of Status Change",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "The date will default to todays date, unless otherwise specified.",
                  "className": "p-light",
                },
                "ref": null,
                "rendered": "The date will default to todays date, unless otherwise specified.",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "status_date",
                  "name": "status_date",
                  "placeholder": "yyyy-mm-dd",
                  "validate": Array [
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col
            span={24}
          >
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                data={
                  Array [
                    Object {
                      "label": "South West",
                      "value": "SW",
                    },
                    Object {
                      "label": "South Central",
                      "value": "SC",
                    },
                    Object {
                      "label": "North West",
                      "value": "NW",
                    },
                    Object {
                      "label": "North East",
                      "value": "NE",
                    },
                    Object {
                      "label": "South East",
                      "value": "SE",
                    },
                  ]
                }
                id="mine_region"
                label="Mine Region *"
                name="mine_region"
                placeholder="Select a Region"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                data={
                  Array [
                    Object {
                      "label": "South West",
                      "value": "SW",
                    },
                    Object {
                      "label": "South Central",
                      "value": "SC",
                    },
                    Object {
                      "label": "North West",
                      "value": "NW",
                    },
                    Object {
                      "label": "North East",
                      "value": "NE",
                    },
                    Object {
                      "label": "South East",
                      "value": "SE",
                    },
                  ]
                }
                id="mine_region"
                label="Mine Region *"
                name="mine_region"
                placeholder="Select a Region"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>,
            "span": 24,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                data={
                  Array [
                    Object {
                      "label": "South West",
                      "value": "SW",
                    },
                    Object {
                      "label": "South Central",
                      "value": "SC",
                    },
                    Object {
                      "label": "North West",
                      "value": "NW",
                    },
                    Object {
                      "label": "North East",
                      "value": "NE",
                    },
                    Object {
                      "label": "South East",
                      "value": "SE",
                    },
                  ]
                }
                id="mine_region"
                label="Mine Region *"
                name="mine_region"
                placeholder="Select a Region"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "data": Array [
                  Object {
                    "label": "South West",
                    "value": "SW",
                  },
                  Object {
                    "label": "South Central",
                    "value": "SC",
                  },
                  Object {
                    "label": "North West",
                    "value": "NW",
                  },
                  Object {
                    "label": "North East",
                    "value": "NE",
                  },
                  Object {
                    "label": "South East",
                    "value": "SE",
                  },
                ],
                "id": "mine_region",
                "label": "Mine Region *",
                "name": "mine_region",
                "placeholder": "Select a Region",
                "validate": Array [
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Col
              md={12}
              xs={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="latitude"
                  label="Latitude"
                  name="latitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            <Col
              md={12}
              xs={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="longitude"
                  label="Longitude"
                  name="longitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
          ],
          "gutter": 16,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="latitude"
                  label="Latitude"
                  name="latitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>,
              "md": 12,
              "xs": 24,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="latitude"
                  label="Latitude"
                  name="latitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "latitude",
                  "label": "Latitude",
                  "name": "latitude",
                  "validate": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="longitude"
                  label="Longitude"
                  name="longitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>,
              "md": 12,
              "xs": 24,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="longitude"
                  label="Longitude"
                  name="longitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "longitude",
                  "label": "Longitude",
                  "name": "longitude",
                  "validate": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "hasFeedback": false,
          "label": "Mine Type",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "name": "mine_types",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_note"
                label="Notes"
                name="mine_note"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="mine_note"
                label="Notes"
                name="mine_note"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                id="mine_note"
                label="Notes"
                name="mine_note"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "mine_note",
                "label": "Notes",
                "name": "mine_note",
                "validate": Array [
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Col>
            <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="major_mine_ind"
                label="Major Mine"
                name="major_mine_ind"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>
          </Col>,
          "gutter": 16,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <Field
                component={[Function]}
                id="major_mine_ind"
                label="Major Mine"
                name="major_mine_ind"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />
            </FormItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Field
                component={[Function]}
                id="major_mine_ind"
                label="Major Mine"
                name="major_mine_ind"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "major_mine_ind",
                "label": "Major Mine",
                "name": "major_mine_ind",
                "type": "checkbox",
                "validate": Array [
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
              >
                Cancel
              </Button>
            </Popconfirm>,
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              type="primary"
            >
              mockTitle
            </Button>,
          ],
          "className": "right center-mobile",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "cancelText": "No",
              "children": <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
              >
                Cancel
              </Button>,
              "icon": <Icon
                theme="filled"
                type="exclamation-circle"
              />,
              "okText": "Yes",
              "okType": "primary",
              "onConfirm": [MockFunction],
              "placement": "topRight",
              "title": "Are you sure you want to cancel?",
              "transitionName": "zoom-big",
              "trigger": "click",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "Cancel",
                "className": "full-mobile",
                "ghost": false,
                "htmlType": "button",
                "loading": false,
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": "mockTitle",
              "className": "full-mobile",
              "disabled": false,
              "ghost": false,
              "htmlType": "submit",
              "loading": false,
              "type": "primary",
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_name"
                  label="Mine Name *"
                  name="mine_name"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_status"
                  label="Mine Status *"
                  name="mine_status"
                  options={undefined}
                  placeholder="Please select status"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                hasFeedback={false}
                label="Date of Status Change"
              >
                <p
                  className="p-light"
                >
                  The date will default to todays date, unless otherwise specified.
                </p>
                <Field
                  component={[Function]}
                  id="status_date"
                  name="status_date"
                  placeholder="yyyy-mm-dd"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <Row
            gutter={16}
          >
            <Col
              span={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  data={
                    Array [
                      Object {
                        "label": "South West",
                        "value": "SW",
                      },
                      Object {
                        "label": "South Central",
                        "value": "SC",
                      },
                      Object {
                        "label": "North West",
                        "value": "NW",
                      },
                      Object {
                        "label": "North East",
                        "value": "NE",
                      },
                      Object {
                        "label": "South East",
                        "value": "SE",
                      },
                    ]
                  }
                  id="mine_region"
                  label="Mine Region *"
                  name="mine_region"
                  placeholder="Select a Region"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <Row
            gutter={16}
          >
            <Col
              md={12}
              xs={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="latitude"
                  label="Latitude"
                  name="latitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
            <Col
              md={12}
              xs={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="longitude"
                  label="Longitude"
                  name="longitude"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <FormItem
            hasFeedback={false}
            label="Mine Type"
          />,
          <FieldArray
            component={[Function]}
            name="mine_types"
          />,
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_note"
                  label="Notes"
                  name="mine_note"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <Row
            gutter={16}
          >
            <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="major_mine_ind"
                  label="Major Mine"
                  name="major_mine_ind"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>
          </Row>,
          <div
            className="right center-mobile"
          >
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
              >
                Cancel
              </Button>
            </Popconfirm>
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              type="primary"
            >
              mockTitle
            </Button>
          </div>,
        ],
        "colon": true,
        "hideRequiredMark": false,
        "layout": "vertical",
        "onSubmit": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_name"
                  label="Mine Name *"
                  name="mine_name"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_name"
                  label="Mine Name *"
                  name="mine_name"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="mine_name"
                  label="Mine Name *"
                  name="mine_name"
                  validate={
                    Array [
                      [Function],
                      [Function],
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "mine_name",
                  "label": "Mine Name *",
                  "name": "mine_name",
                  "validate": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_status"
                  label="Mine Status *"
                  name="mine_status"
                  options={undefined}
                  placeholder="Please select status"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_status"
                  label="Mine Status *"
                  name="mine_status"
                  options={undefined}
                  placeholder="Please select status"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="mine_status"
                  label="Mine Status *"
                  name="mine_status"
                  options={undefined}
                  placeholder="Please select status"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "mine_status",
                  "label": "Mine Status *",
                  "name": "mine_status",
                  "options": undefined,
                  "placeholder": "Please select status",
                  "validate": Array [
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                hasFeedback={false}
                label="Date of Status Change"
              >
                <p
                  className="p-light"
                >
                  The date will default to todays date, unless otherwise specified.
                </p>
                <Field
                  component={[Function]}
                  id="status_date"
                  name="status_date"
                  placeholder="yyyy-mm-dd"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
                label="Date of Status Change"
              >
                <p
                  className="p-light"
                >
                  The date will default to todays date, unless otherwise specified.
                </p>
                <Field
                  component={[Function]}
                  id="status_date"
                  name="status_date"
                  placeholder="yyyy-mm-dd"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <p
                    className="p-light"
                  >
                    The date will default to todays date, unless otherwise specified.
                  </p>,
                  <Field
                    component={[Function]}
                    id="status_date"
                    name="status_date"
                    placeholder="yyyy-mm-dd"
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  />,
                ],
                "hasFeedback": false,
                "label": "Date of Status Change",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "The date will default to todays date, unless otherwise specified.",
                    "className": "p-light",
                  },
                  "ref": null,
                  "rendered": "The date will default to todays date, unless otherwise specified.",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "id": "status_date",
                    "name": "status_date",
                    "placeholder": "yyyy-mm-dd",
                    "validate": Array [
                      [Function],
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col
              span={24}
            >
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  data={
                    Array [
                      Object {
                        "label": "South West",
                        "value": "SW",
                      },
                      Object {
                        "label": "South Central",
                        "value": "SC",
                      },
                      Object {
                        "label": "North West",
                        "value": "NW",
                      },
                      Object {
                        "label": "North East",
                        "value": "NE",
                      },
                      Object {
                        "label": "South East",
                        "value": "SE",
                      },
                    ]
                  }
                  id="mine_region"
                  label="Mine Region *"
                  name="mine_region"
                  placeholder="Select a Region"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  data={
                    Array [
                      Object {
                        "label": "South West",
                        "value": "SW",
                      },
                      Object {
                        "label": "South Central",
                        "value": "SC",
                      },
                      Object {
                        "label": "North West",
                        "value": "NW",
                      },
                      Object {
                        "label": "North East",
                        "value": "NE",
                      },
                      Object {
                        "label": "South East",
                        "value": "SE",
                      },
                    ]
                  }
                  id="mine_region"
                  label="Mine Region *"
                  name="mine_region"
                  placeholder="Select a Region"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>,
              "span": 24,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  data={
                    Array [
                      Object {
                        "label": "South West",
                        "value": "SW",
                      },
                      Object {
                        "label": "South Central",
                        "value": "SC",
                      },
                      Object {
                        "label": "North West",
                        "value": "NW",
                      },
                      Object {
                        "label": "North East",
                        "value": "NE",
                      },
                      Object {
                        "label": "South East",
                        "value": "SE",
                      },
                    ]
                  }
                  id="mine_region"
                  label="Mine Region *"
                  name="mine_region"
                  placeholder="Select a Region"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "data": Array [
                    Object {
                      "label": "South West",
                      "value": "SW",
                    },
                    Object {
                      "label": "South Central",
                      "value": "SC",
                    },
                    Object {
                      "label": "North West",
                      "value": "NW",
                    },
                    Object {
                      "label": "North East",
                      "value": "NE",
                    },
                    Object {
                      "label": "South East",
                      "value": "SE",
                    },
                  ],
                  "id": "mine_region",
                  "label": "Mine Region *",
                  "name": "mine_region",
                  "placeholder": "Select a Region",
                  "validate": Array [
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Col
                md={12}
                xs={24}
              >
                <FormItem
                  hasFeedback={false}
                >
                  <Field
                    component={[Function]}
                    id="latitude"
                    label="Latitude"
                    name="latitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />
                </FormItem>
              </Col>,
              <Col
                md={12}
                xs={24}
              >
                <FormItem
                  hasFeedback={false}
                >
                  <Field
                    component={[Function]}
                    id="longitude"
                    label="Longitude"
                    name="longitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />
                </FormItem>
              </Col>,
            ],
            "gutter": 16,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormItem
                  hasFeedback={false}
                >
                  <Field
                    component={[Function]}
                    id="latitude"
                    label="Latitude"
                    name="latitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />
                </FormItem>,
                "md": 12,
                "xs": 24,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Field
                    component={[Function]}
                    id="latitude"
                    label="Latitude"
                    name="latitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />,
                  "hasFeedback": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "id": "latitude",
                    "label": "Latitude",
                    "name": "latitude",
                    "validate": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormItem
                  hasFeedback={false}
                >
                  <Field
                    component={[Function]}
                    id="longitude"
                    label="Longitude"
                    name="longitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />
                </FormItem>,
                "md": 12,
                "xs": 24,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Field
                    component={[Function]}
                    id="longitude"
                    label="Longitude"
                    name="longitude"
                    validate={
                      Array [
                        [Function],
                        [Function],
                        [Function],
                      ]
                    }
                  />,
                  "hasFeedback": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "id": "longitude",
                    "label": "Longitude",
                    "name": "longitude",
                    "validate": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "hasFeedback": false,
            "label": "Mine Type",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "name": "mine_types",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_note"
                  label="Notes"
                  name="mine_note"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="mine_note"
                  label="Notes"
                  name="mine_note"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="mine_note"
                  label="Notes"
                  name="mine_note"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "mine_note",
                  "label": "Notes",
                  "name": "mine_note",
                  "validate": Array [
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Col>
              <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="major_mine_ind"
                  label="Major Mine"
                  name="major_mine_ind"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>
            </Col>,
            "gutter": 16,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <FormItem
                hasFeedback={false}
              >
                <Field
                  component={[Function]}
                  id="major_mine_ind"
                  label="Major Mine"
                  name="major_mine_ind"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </FormItem>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Field
                  component={[Function]}
                  id="major_mine_ind"
                  label="Major Mine"
                  name="major_mine_ind"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />,
                "hasFeedback": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "id": "major_mine_ind",
                  "label": "Major Mine",
                  "name": "major_mine_ind",
                  "type": "checkbox",
                  "validate": Array [
                    [Function],
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Popconfirm
                cancelText="No"
                icon={
                  <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />
                }
                okText="Yes"
                okType="primary"
                onConfirm={[MockFunction]}
                placement="topRight"
                title="Are you sure you want to cancel?"
                transitionName="zoom-big"
                trigger="click"
              >
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                >
                  Cancel
                </Button>
              </Popconfirm>,
              <Button
                block={false}
                className="full-mobile"
                disabled={false}
                ghost={false}
                htmlType="submit"
                loading={false}
                type="primary"
              >
                mockTitle
              </Button>,
            ],
            "className": "right center-mobile",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelText": "No",
                "children": <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                >
                  Cancel
                </Button>,
                "icon": <Icon
                  theme="filled"
                  type="exclamation-circle"
                />,
                "okText": "Yes",
                "okType": "primary",
                "onConfirm": [MockFunction],
                "placement": "topRight",
                "title": "Are you sure you want to cancel?",
                "transitionName": "zoom-big",
                "trigger": "click",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Cancel",
                  "className": "full-mobile",
                  "ghost": false,
                  "htmlType": "button",
                  "loading": false,
                },
                "ref": null,
                "rendered": "Cancel",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "mockTitle",
                "className": "full-mobile",
                "disabled": false,
                "ghost": false,
                "htmlType": "submit",
                "loading": false,
                "type": "primary",
              },
              "ref": null,
              "rendered": "mockTitle",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
