// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddVarianceForm renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddVarianceForm
    closeModal={[MockFunction]}
    complianceCodes={
      Array [
        Object {
          "label": "2.3.7 - Spills",
          "value": 305,
        },
        Object {
          "label": "2.3.8 - Flammable Waste Storage",
          "value": 306,
        },
      ]
    }
    documentCategoryOptions={
      Array [
        Object {
          "label": "Request Document",
          "value": "REQ",
        },
        Object {
          "label": "Recommendation Document",
          "value": "REC",
        },
        Object {
          "label": "Decision Document",
          "value": "DEC",
        },
      ]
    }
    handleSubmit={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
      }
    }
    inspectors={
      Object {
        "18133c75-49ad-4101-85f3-a43e35ae989a": Object {
          "guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
          "name": "mock name",
        },
        "18145c75-49ad-0101-85f3-a43e45ae989a": Object {
          "guid": "18145c75-49ad-0101-85f3-a43e45ae989a",
          "name": "mock Two",
        },
      }
    }
    mineGuid="48593"
    onSubmit={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {},
            true,
          ],
        ],
      }
    }
    submitting={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <FormItem
          hasFeedback={false}
          label="Are you creating an application or an approved variance?"
        >
          <RadioGroup
            buttonStyle="outline"
            disabled={false}
            onChange={[Function]}
            value={true}
          >
            <Radio
              type="radio"
              value={true}
            >
               Application 
            </Radio>
            <Radio
              type="radio"
              value={false}
            >
               Approved Variance 
            </Radio>
          </RadioGroup>
        </FormItem>,
        <FormItem
          hasFeedback={false}
        >
          <Field
            component={[Function]}
            data={
              Array [
                Object {
                  "label": "2.3.7 - Spills",
                  "value": 305,
                },
                Object {
                  "label": "2.3.8 - Flammable Waste Storage",
                  "value": 306,
                },
              ]
            }
            id="compliance_article_id"
            label="Part of Code*"
            name="compliance_article_id"
            placeholder="Select a part of the code"
            validate={
              Array [
                [Function],
              ]
            }
          />
        </FormItem>,
        <FormItem
          hasFeedback={false}
          label="Received date"
        >
          <p
            className="p-light"
          >
            If the received date is not specified it will be set to todays date
          </p>
          <Field
            component={[Function]}
            id="received_date"
            name="received_date"
            validate={
              Array [
                [Function],
              ]
            }
          />
        </FormItem>,
        false,
        <FormItem
          hasFeedback={false}
        >
          <Field
            component={[Function]}
            id="note"
            label="Description"
            name="note"
            validate={
              Array [
                [Function],
              ]
            }
          />
        </FormItem>,
        <br />,
        <h5>
          upload files
        </h5>,
        <p
          className="p-light"
        >
          All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.
        </p>,
        <br />,
        <FormItem
          hasFeedback={false}
        >
          <Field
            component={[Function]}
            data={
              Array [
                Object {
                  "label": "Request Document",
                  "value": "REQ",
                },
                Object {
                  "label": "Recommendation Document",
                  "value": "REC",
                },
                Object {
                  "label": "Decision Document",
                  "value": "DEC",
                },
              ]
            }
            id="variance_document_category_code"
            label="Document Category"
            name="variance_document_category_code"
            placeholder="Please select category"
            validate={Array []}
          />
        </FormItem>,
        <FormItem
          hasFeedback={false}
        >
          <Field
            component={[Function]}
            id="VarianceDocumentFileUpload"
            mineGuid="48593"
            name="VarianceDocumentFileUpload"
            onFileLoad={[Function]}
            onRemoveFile={[Function]}
          />
        </FormItem>,
        <FormItem
          hasFeedback={false}
        >
          <Field
            component={[Function]}
            id="parties_notified_ind"
            label="Affected parties have been notified about this Variance request and decision"
            name="parties_notified_ind"
            type="checkbox"
          />
        </FormItem>,
        <div
          className="right center-mobile"
        >
          <Popconfirm
            cancelText="No"
            icon={
              <Icon
                theme="filled"
                type="exclamation-circle"
              />
            }
            okText="Yes"
            okType="primary"
            onConfirm={[MockFunction]}
            placement="topRight"
            title="Are you sure you want to cancel?"
            transitionName="zoom-big"
            trigger="click"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="button"
              loading={false}
              type="secondary"
            >
              Cancel
            </Button>
          </Popconfirm>
          <Button
            block={false}
            className="full-mobile"
            disabled={false}
            ghost={false}
            htmlType="submit"
            loading={false}
            type="primary"
          >
            Add Variance
          </Button>
        </div>,
      ],
      "colon": true,
      "hideRequiredMark": false,
      "layout": "vertical",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <RadioGroup
            buttonStyle="outline"
            disabled={false}
            onChange={[Function]}
            value={true}
          >
            <Radio
              type="radio"
              value={true}
            >
               Application 
            </Radio>
            <Radio
              type="radio"
              value={false}
            >
               Approved Variance 
            </Radio>
          </RadioGroup>,
          "hasFeedback": false,
          "label": "Are you creating an application or an approved variance?",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "buttonStyle": "outline",
            "children": Array [
              <Radio
                type="radio"
                value={true}
              >
                 Application 
              </Radio>,
              <Radio
                type="radio"
                value={false}
              >
                 Approved Variance 
              </Radio>,
            ],
            "disabled": false,
            "onChange": [Function],
            "value": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": " Application ",
                "type": "radio",
                "value": true,
              },
              "ref": null,
              "rendered": " Application ",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": " Approved Variance ",
                "type": "radio",
                "value": false,
              },
              "ref": null,
              "rendered": " Approved Variance ",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            data={
              Array [
                Object {
                  "label": "2.3.7 - Spills",
                  "value": 305,
                },
                Object {
                  "label": "2.3.8 - Flammable Waste Storage",
                  "value": 306,
                },
              ]
            }
            id="compliance_article_id"
            label="Part of Code*"
            name="compliance_article_id"
            placeholder="Select a part of the code"
            validate={
              Array [
                [Function],
              ]
            }
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "data": Array [
              Object {
                "label": "2.3.7 - Spills",
                "value": 305,
              },
              Object {
                "label": "2.3.8 - Flammable Waste Storage",
                "value": 306,
              },
            ],
            "id": "compliance_article_id",
            "label": "Part of Code*",
            "name": "compliance_article_id",
            "placeholder": "Select a part of the code",
            "validate": Array [
              [Function],
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <p
              className="p-light"
            >
              If the received date is not specified it will be set to todays date
            </p>,
            <Field
              component={[Function]}
              id="received_date"
              name="received_date"
              validate={
                Array [
                  [Function],
                ]
              }
            />,
          ],
          "hasFeedback": false,
          "label": "Received date",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "If the received date is not specified it will be set to todays date",
              "className": "p-light",
            },
            "ref": null,
            "rendered": "If the received date is not specified it will be set to todays date",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "received_date",
              "name": "received_date",
              "validate": Array [
                [Function],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            id="note"
            label="Description"
            name="note"
            validate={
              Array [
                [Function],
              ]
            }
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "id": "note",
            "label": "Description",
            "name": "note",
            "validate": Array [
              [Function],
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "upload files",
        },
        "ref": null,
        "rendered": "upload files",
        "type": "h5",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.",
          "className": "p-light",
        },
        "ref": null,
        "rendered": "All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            data={
              Array [
                Object {
                  "label": "Request Document",
                  "value": "REQ",
                },
                Object {
                  "label": "Recommendation Document",
                  "value": "REC",
                },
                Object {
                  "label": "Decision Document",
                  "value": "DEC",
                },
              ]
            }
            id="variance_document_category_code"
            label="Document Category"
            name="variance_document_category_code"
            placeholder="Please select category"
            validate={Array []}
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "data": Array [
              Object {
                "label": "Request Document",
                "value": "REQ",
              },
              Object {
                "label": "Recommendation Document",
                "value": "REC",
              },
              Object {
                "label": "Decision Document",
                "value": "DEC",
              },
            ],
            "id": "variance_document_category_code",
            "label": "Document Category",
            "name": "variance_document_category_code",
            "placeholder": "Please select category",
            "validate": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            id="VarianceDocumentFileUpload"
            mineGuid="48593"
            name="VarianceDocumentFileUpload"
            onFileLoad={[Function]}
            onRemoveFile={[Function]}
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "id": "VarianceDocumentFileUpload",
            "mineGuid": "48593",
            "name": "VarianceDocumentFileUpload",
            "onFileLoad": [Function],
            "onRemoveFile": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            component={[Function]}
            id="parties_notified_ind"
            label="Affected parties have been notified about this Variance request and decision"
            name="parties_notified_ind"
            type="checkbox"
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "id": "parties_notified_ind",
            "label": "Affected parties have been notified about this Variance request and decision",
            "name": "parties_notified_ind",
            "type": "checkbox",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>,
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              type="primary"
            >
              Add Variance
            </Button>,
          ],
          "className": "right center-mobile",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "cancelText": "No",
              "children": <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
                type="secondary"
              >
                Cancel
              </Button>,
              "icon": <Icon
                theme="filled"
                type="exclamation-circle"
              />,
              "okText": "Yes",
              "okType": "primary",
              "onConfirm": [MockFunction],
              "placement": "topRight",
              "title": "Are you sure you want to cancel?",
              "transitionName": "zoom-big",
              "trigger": "click",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "Cancel",
                "className": "full-mobile",
                "ghost": false,
                "htmlType": "button",
                "loading": false,
                "type": "secondary",
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": "Add Variance",
              "className": "full-mobile",
              "disabled": false,
              "ghost": false,
              "htmlType": "submit",
              "loading": false,
              "type": "primary",
            },
            "ref": null,
            "rendered": "Add Variance",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <FormItem
            hasFeedback={false}
            label="Are you creating an application or an approved variance?"
          >
            <RadioGroup
              buttonStyle="outline"
              disabled={false}
              onChange={[Function]}
              value={true}
            >
              <Radio
                type="radio"
                value={true}
              >
                 Application 
              </Radio>
              <Radio
                type="radio"
                value={false}
              >
                 Approved Variance 
              </Radio>
            </RadioGroup>
          </FormItem>,
          <FormItem
            hasFeedback={false}
          >
            <Field
              component={[Function]}
              data={
                Array [
                  Object {
                    "label": "2.3.7 - Spills",
                    "value": 305,
                  },
                  Object {
                    "label": "2.3.8 - Flammable Waste Storage",
                    "value": 306,
                  },
                ]
              }
              id="compliance_article_id"
              label="Part of Code*"
              name="compliance_article_id"
              placeholder="Select a part of the code"
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </FormItem>,
          <FormItem
            hasFeedback={false}
            label="Received date"
          >
            <p
              className="p-light"
            >
              If the received date is not specified it will be set to todays date
            </p>
            <Field
              component={[Function]}
              id="received_date"
              name="received_date"
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </FormItem>,
          false,
          <FormItem
            hasFeedback={false}
          >
            <Field
              component={[Function]}
              id="note"
              label="Description"
              name="note"
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </FormItem>,
          <br />,
          <h5>
            upload files
          </h5>,
          <p
            className="p-light"
          >
            All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.
          </p>,
          <br />,
          <FormItem
            hasFeedback={false}
          >
            <Field
              component={[Function]}
              data={
                Array [
                  Object {
                    "label": "Request Document",
                    "value": "REQ",
                  },
                  Object {
                    "label": "Recommendation Document",
                    "value": "REC",
                  },
                  Object {
                    "label": "Decision Document",
                    "value": "DEC",
                  },
                ]
              }
              id="variance_document_category_code"
              label="Document Category"
              name="variance_document_category_code"
              placeholder="Please select category"
              validate={Array []}
            />
          </FormItem>,
          <FormItem
            hasFeedback={false}
          >
            <Field
              component={[Function]}
              id="VarianceDocumentFileUpload"
              mineGuid="48593"
              name="VarianceDocumentFileUpload"
              onFileLoad={[Function]}
              onRemoveFile={[Function]}
            />
          </FormItem>,
          <FormItem
            hasFeedback={false}
          >
            <Field
              component={[Function]}
              id="parties_notified_ind"
              label="Affected parties have been notified about this Variance request and decision"
              name="parties_notified_ind"
              type="checkbox"
            />
          </FormItem>,
          <div
            className="right center-mobile"
          >
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={[MockFunction]}
              placement="topRight"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                htmlType="button"
                loading={false}
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>
            <Button
              block={false}
              className="full-mobile"
              disabled={false}
              ghost={false}
              htmlType="submit"
              loading={false}
              type="primary"
            >
              Add Variance
            </Button>
          </div>,
        ],
        "colon": true,
        "hideRequiredMark": false,
        "layout": "vertical",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <RadioGroup
              buttonStyle="outline"
              disabled={false}
              onChange={[Function]}
              value={true}
            >
              <Radio
                type="radio"
                value={true}
              >
                 Application 
              </Radio>
              <Radio
                type="radio"
                value={false}
              >
                 Approved Variance 
              </Radio>
            </RadioGroup>,
            "hasFeedback": false,
            "label": "Are you creating an application or an approved variance?",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "buttonStyle": "outline",
              "children": Array [
                <Radio
                  type="radio"
                  value={true}
                >
                   Application 
                </Radio>,
                <Radio
                  type="radio"
                  value={false}
                >
                   Approved Variance 
                </Radio>,
              ],
              "disabled": false,
              "onChange": [Function],
              "value": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": " Application ",
                  "type": "radio",
                  "value": true,
                },
                "ref": null,
                "rendered": " Application ",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": " Approved Variance ",
                  "type": "radio",
                  "value": false,
                },
                "ref": null,
                "rendered": " Approved Variance ",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              data={
                Array [
                  Object {
                    "label": "2.3.7 - Spills",
                    "value": 305,
                  },
                  Object {
                    "label": "2.3.8 - Flammable Waste Storage",
                    "value": 306,
                  },
                ]
              }
              id="compliance_article_id"
              label="Part of Code*"
              name="compliance_article_id"
              placeholder="Select a part of the code"
              validate={
                Array [
                  [Function],
                ]
              }
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "data": Array [
                Object {
                  "label": "2.3.7 - Spills",
                  "value": 305,
                },
                Object {
                  "label": "2.3.8 - Flammable Waste Storage",
                  "value": 306,
                },
              ],
              "id": "compliance_article_id",
              "label": "Part of Code*",
              "name": "compliance_article_id",
              "placeholder": "Select a part of the code",
              "validate": Array [
                [Function],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <p
                className="p-light"
              >
                If the received date is not specified it will be set to todays date
              </p>,
              <Field
                component={[Function]}
                id="received_date"
                name="received_date"
                validate={
                  Array [
                    [Function],
                  ]
                }
              />,
            ],
            "hasFeedback": false,
            "label": "Received date",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "If the received date is not specified it will be set to todays date",
                "className": "p-light",
              },
              "ref": null,
              "rendered": "If the received date is not specified it will be set to todays date",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "id": "received_date",
                "name": "received_date",
                "validate": Array [
                  [Function],
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              id="note"
              label="Description"
              name="note"
              validate={
                Array [
                  [Function],
                ]
              }
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "note",
              "label": "Description",
              "name": "note",
              "validate": Array [
                [Function],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "upload files",
          },
          "ref": null,
          "rendered": "upload files",
          "type": "h5",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.",
            "className": "p-light",
          },
          "ref": null,
          "rendered": "All documents uploaded will be associated with the category selected, if you would like to add a different category of documents please submit and edit the variance.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              data={
                Array [
                  Object {
                    "label": "Request Document",
                    "value": "REQ",
                  },
                  Object {
                    "label": "Recommendation Document",
                    "value": "REC",
                  },
                  Object {
                    "label": "Decision Document",
                    "value": "DEC",
                  },
                ]
              }
              id="variance_document_category_code"
              label="Document Category"
              name="variance_document_category_code"
              placeholder="Please select category"
              validate={Array []}
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "data": Array [
                Object {
                  "label": "Request Document",
                  "value": "REQ",
                },
                Object {
                  "label": "Recommendation Document",
                  "value": "REC",
                },
                Object {
                  "label": "Decision Document",
                  "value": "DEC",
                },
              ],
              "id": "variance_document_category_code",
              "label": "Document Category",
              "name": "variance_document_category_code",
              "placeholder": "Please select category",
              "validate": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              id="VarianceDocumentFileUpload"
              mineGuid="48593"
              name="VarianceDocumentFileUpload"
              onFileLoad={[Function]}
              onRemoveFile={[Function]}
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "VarianceDocumentFileUpload",
              "mineGuid": "48593",
              "name": "VarianceDocumentFileUpload",
              "onFileLoad": [Function],
              "onRemoveFile": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              component={[Function]}
              id="parties_notified_ind"
              label="Affected parties have been notified about this Variance request and decision"
              name="parties_notified_ind"
              type="checkbox"
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "id": "parties_notified_ind",
              "label": "Affected parties have been notified about this Variance request and decision",
              "name": "parties_notified_ind",
              "type": "checkbox",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Popconfirm
                cancelText="No"
                icon={
                  <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />
                }
                okText="Yes"
                okType="primary"
                onConfirm={[MockFunction]}
                placement="topRight"
                title="Are you sure you want to cancel?"
                transitionName="zoom-big"
                trigger="click"
              >
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                  type="secondary"
                >
                  Cancel
                </Button>
              </Popconfirm>,
              <Button
                block={false}
                className="full-mobile"
                disabled={false}
                ghost={false}
                htmlType="submit"
                loading={false}
                type="primary"
              >
                Add Variance
              </Button>,
            ],
            "className": "right center-mobile",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelText": "No",
                "children": <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                  type="secondary"
                >
                  Cancel
                </Button>,
                "icon": <Icon
                  theme="filled"
                  type="exclamation-circle"
                />,
                "okText": "Yes",
                "okType": "primary",
                "onConfirm": [MockFunction],
                "placement": "topRight",
                "title": "Are you sure you want to cancel?",
                "transitionName": "zoom-big",
                "trigger": "click",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Cancel",
                  "className": "full-mobile",
                  "ghost": false,
                  "htmlType": "button",
                  "loading": false,
                  "type": "secondary",
                },
                "ref": null,
                "rendered": "Cancel",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "Add Variance",
                "className": "full-mobile",
                "disabled": false,
                "ghost": false,
                "htmlType": "submit",
                "loading": false,
                "type": "primary",
              },
              "ref": null,
              "rendered": "Add Variance",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
