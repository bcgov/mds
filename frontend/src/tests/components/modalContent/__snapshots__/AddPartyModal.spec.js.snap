// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddPartyModal renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddPartyModal
    addPartyForm={Object {}}
    addPartyFormValues={Object {}}
    createParty={[MockFunction]}
    fetchData={[MockFunction]}
    reset={[MockFunction]}
    submit={[MockFunction]}
    title="mockTitle"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        <Steps
          current={0}
          iconPrefix="ant"
          prefixCls="ant-steps"
        >
          <Step
            title="Basic Information"
          />
          <Step
            title="Confirmation"
          />
        </Steps>
        <div>
          <ReduxForm
            addPartyForm={Object {}}
            addPartyFormValues={Object {}}
            createParty={[MockFunction]}
            fetchData={[MockFunction]}
            handleFormReset={undefined}
            isPerson={true}
            onSubmit={[Function]}
            reset={[MockFunction]}
            submit={[MockFunction]}
            title="mockTitle"
            togglePartyChange={[Function]}
          />
        </div>
        <div
          className="right center-mobile"
        >
          <Popconfirm
            cancelText="No"
            icon={
              <Icon
                theme="filled"
                type="exclamation-circle"
              />
            }
            okText="Yes"
            okType="primary"
            onConfirm={undefined}
            placement="top"
            prefixCls="ant-popover"
            title="Are you sure you want to cancel?"
            transitionName="zoom-big"
            trigger="click"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              loading={false}
              prefixCls="ant-btn"
              type="secondary"
            >
              Cancel
            </Button>
          </Popconfirm>
          <Button
            block={false}
            className="full-mobile"
            ghost={false}
            loading={false}
            onClick={[Function]}
            prefixCls="ant-btn"
            type="primary"
          >
            Next
          </Button>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Steps
            current={0}
            iconPrefix="ant"
            prefixCls="ant-steps"
          >
            <Step
              title="Basic Information"
            />
            <Step
              title="Confirmation"
            />
          </Steps>,
          <div>
            <ReduxForm
              addPartyForm={Object {}}
              addPartyFormValues={Object {}}
              createParty={[MockFunction]}
              fetchData={[MockFunction]}
              handleFormReset={undefined}
              isPerson={true}
              onSubmit={[Function]}
              reset={[MockFunction]}
              submit={[MockFunction]}
              title="mockTitle"
              togglePartyChange={[Function]}
            />
          </div>,
          <div
            className="right center-mobile"
          >
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={undefined}
              placement="top"
              prefixCls="ant-popover"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                prefixCls="ant-btn"
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              loading={false}
              onClick={[Function]}
              prefixCls="ant-btn"
              type="primary"
            >
              Next
            </Button>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Step
                title="Basic Information"
              />,
              <Step
                title="Confirmation"
              />,
            ],
            "current": 0,
            "iconPrefix": "ant",
            "prefixCls": "ant-steps",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "Basic Information",
              "nodeType": "class",
              "props": Object {
                "title": "Basic Information",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "Confirmation",
              "nodeType": "class",
              "props": Object {
                "title": "Confirmation",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ReduxForm
              addPartyForm={Object {}}
              addPartyFormValues={Object {}}
              createParty={[MockFunction]}
              fetchData={[MockFunction]}
              handleFormReset={undefined}
              isPerson={true}
              onSubmit={[Function]}
              reset={[MockFunction]}
              submit={[MockFunction]}
              title="mockTitle"
              togglePartyChange={[Function]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addPartyForm": Object {},
              "addPartyFormValues": Object {},
              "createParty": [MockFunction],
              "fetchData": [MockFunction],
              "handleFormReset": undefined,
              "isPerson": true,
              "onSubmit": [Function],
              "reset": [MockFunction],
              "submit": [MockFunction],
              "title": "mockTitle",
              "togglePartyChange": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Popconfirm
                cancelText="No"
                icon={
                  <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />
                }
                okText="Yes"
                okType="primary"
                onConfirm={undefined}
                placement="top"
                prefixCls="ant-popover"
                title="Are you sure you want to cancel?"
                transitionName="zoom-big"
                trigger="click"
              >
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  prefixCls="ant-btn"
                  type="secondary"
                >
                  Cancel
                </Button>
              </Popconfirm>,
              false,
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                onClick={[Function]}
                prefixCls="ant-btn"
                type="primary"
              >
                Next
              </Button>,
              false,
            ],
            "className": "right center-mobile",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelText": "No",
                "children": <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  prefixCls="ant-btn"
                  type="secondary"
                >
                  Cancel
                </Button>,
                "icon": <Icon
                  theme="filled"
                  type="exclamation-circle"
                />,
                "okText": "Yes",
                "okType": "primary",
                "onConfirm": undefined,
                "placement": "top",
                "prefixCls": "ant-popover",
                "title": "Are you sure you want to cancel?",
                "transitionName": "zoom-big",
                "trigger": "click",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Cancel",
                  "className": "full-mobile",
                  "ghost": false,
                  "loading": false,
                  "prefixCls": "ant-btn",
                  "type": "secondary",
                },
                "ref": null,
                "rendered": "Cancel",
                "type": [Function],
              },
              "type": [Function],
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": false,
                "children": "Next",
                "className": "full-mobile",
                "ghost": false,
                "loading": false,
                "onClick": [Function],
                "prefixCls": "ant-btn",
                "type": "primary",
              },
              "ref": null,
              "rendered": "Next",
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <Steps
            current={0}
            iconPrefix="ant"
            prefixCls="ant-steps"
          >
            <Step
              title="Basic Information"
            />
            <Step
              title="Confirmation"
            />
          </Steps>
          <div>
            <ReduxForm
              addPartyForm={Object {}}
              addPartyFormValues={Object {}}
              createParty={[MockFunction]}
              fetchData={[MockFunction]}
              handleFormReset={undefined}
              isPerson={true}
              onSubmit={[Function]}
              reset={[MockFunction]}
              submit={[MockFunction]}
              title="mockTitle"
              togglePartyChange={[Function]}
            />
          </div>
          <div
            className="right center-mobile"
          >
            <Popconfirm
              cancelText="No"
              icon={
                <Icon
                  theme="filled"
                  type="exclamation-circle"
                />
              }
              okText="Yes"
              okType="primary"
              onConfirm={undefined}
              placement="top"
              prefixCls="ant-popover"
              title="Are you sure you want to cancel?"
              transitionName="zoom-big"
              trigger="click"
            >
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                prefixCls="ant-btn"
                type="secondary"
              >
                Cancel
              </Button>
            </Popconfirm>
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              loading={false}
              onClick={[Function]}
              prefixCls="ant-btn"
              type="primary"
            >
              Next
            </Button>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Steps
              current={0}
              iconPrefix="ant"
              prefixCls="ant-steps"
            >
              <Step
                title="Basic Information"
              />
              <Step
                title="Confirmation"
              />
            </Steps>,
            <div>
              <ReduxForm
                addPartyForm={Object {}}
                addPartyFormValues={Object {}}
                createParty={[MockFunction]}
                fetchData={[MockFunction]}
                handleFormReset={undefined}
                isPerson={true}
                onSubmit={[Function]}
                reset={[MockFunction]}
                submit={[MockFunction]}
                title="mockTitle"
                togglePartyChange={[Function]}
              />
            </div>,
            <div
              className="right center-mobile"
            >
              <Popconfirm
                cancelText="No"
                icon={
                  <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />
                }
                okText="Yes"
                okType="primary"
                onConfirm={undefined}
                placement="top"
                prefixCls="ant-popover"
                title="Are you sure you want to cancel?"
                transitionName="zoom-big"
                trigger="click"
              >
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  prefixCls="ant-btn"
                  type="secondary"
                >
                  Cancel
                </Button>
              </Popconfirm>
              <Button
                block={false}
                className="full-mobile"
                ghost={false}
                loading={false}
                onClick={[Function]}
                prefixCls="ant-btn"
                type="primary"
              >
                Next
              </Button>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Step
                  title="Basic Information"
                />,
                <Step
                  title="Confirmation"
                />,
              ],
              "current": 0,
              "iconPrefix": "ant",
              "prefixCls": "ant-steps",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "Basic Information",
                "nodeType": "class",
                "props": Object {
                  "title": "Basic Information",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "Confirmation",
                "nodeType": "class",
                "props": Object {
                  "title": "Confirmation",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <ReduxForm
                addPartyForm={Object {}}
                addPartyFormValues={Object {}}
                createParty={[MockFunction]}
                fetchData={[MockFunction]}
                handleFormReset={undefined}
                isPerson={true}
                onSubmit={[Function]}
                reset={[MockFunction]}
                submit={[MockFunction]}
                title="mockTitle"
                togglePartyChange={[Function]}
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addPartyForm": Object {},
                "addPartyFormValues": Object {},
                "createParty": [MockFunction],
                "fetchData": [MockFunction],
                "handleFormReset": undefined,
                "isPerson": true,
                "onSubmit": [Function],
                "reset": [MockFunction],
                "submit": [MockFunction],
                "title": "mockTitle",
                "togglePartyChange": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Popconfirm
                  cancelText="No"
                  icon={
                    <Icon
                      theme="filled"
                      type="exclamation-circle"
                    />
                  }
                  okText="Yes"
                  okType="primary"
                  onConfirm={undefined}
                  placement="top"
                  prefixCls="ant-popover"
                  title="Are you sure you want to cancel?"
                  transitionName="zoom-big"
                  trigger="click"
                >
                  <Button
                    block={false}
                    className="full-mobile"
                    ghost={false}
                    loading={false}
                    prefixCls="ant-btn"
                    type="secondary"
                  >
                    Cancel
                  </Button>
                </Popconfirm>,
                false,
                <Button
                  block={false}
                  className="full-mobile"
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  Next
                </Button>,
                false,
              ],
              "className": "right center-mobile",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "cancelText": "No",
                  "children": <Button
                    block={false}
                    className="full-mobile"
                    ghost={false}
                    loading={false}
                    prefixCls="ant-btn"
                    type="secondary"
                  >
                    Cancel
                  </Button>,
                  "icon": <Icon
                    theme="filled"
                    type="exclamation-circle"
                  />,
                  "okText": "Yes",
                  "okType": "primary",
                  "onConfirm": undefined,
                  "placement": "top",
                  "prefixCls": "ant-popover",
                  "title": "Are you sure you want to cancel?",
                  "transitionName": "zoom-big",
                  "trigger": "click",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "block": false,
                    "children": "Cancel",
                    "className": "full-mobile",
                    "ghost": false,
                    "loading": false,
                    "prefixCls": "ant-btn",
                    "type": "secondary",
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": [Function],
                },
                "type": [Function],
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Next",
                  "className": "full-mobile",
                  "ghost": false,
                  "loading": false,
                  "onClick": [Function],
                  "prefixCls": "ant-btn",
                  "type": "primary",
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
