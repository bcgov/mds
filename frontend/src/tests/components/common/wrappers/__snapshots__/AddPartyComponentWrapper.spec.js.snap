// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddPartyComponentWrapper renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddPartyComponentWrapper
    addPartyFormState={
      Object {
        "organization": true,
        "partyLabel": "contact",
        "person": true,
        "showingAddPartyForm": false,
      }
    }
    childProps={
      Object {
        "title": "mockTitle",
      }
    }
    clearOnSubmit={false}
    closeModal={[MockFunction]}
    content={[MockFunction]}
    createParty={[MockFunction]}
    initialValues={Object {}}
    setAddPartyFormState={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "organization": true,
              "partyLabel": "contact",
              "person": true,
              "showingAddPartyForm": false,
            },
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Carousel
        autoPlay={false}
        axis="horizontal"
        centerMode={false}
        centerSlidePercentage={80}
        dynamicHeight={false}
        emulateTouch={false}
        infiniteLoop={false}
        interval={3000}
        onChange={[Function]}
        onClickItem={[Function]}
        onClickThumb={[Function]}
        selectedItem={0}
        showArrows={false}
        showIndicators={false}
        showStatus={false}
        showThumbs={false}
        statusFormatter={[Function]}
        stopOnHover={true}
        swipeScrollTolerance={5}
        swipeable={false}
        transitionTime={350}
        useKeyboardArrows={false}
        verticalSwipe="standard"
        width="100%"
      >
        <div
          style={Object {}}
        >
          <div
            className="fade-in"
          >
            <mockConstructor
              clearOnSubmit={false}
              closeModal={[MockFunction]}
              title="mockTitle"
            />
          </div>
        </div>
        <div />
      </Carousel>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "autoPlay": false,
        "axis": "horizontal",
        "centerMode": false,
        "centerSlidePercentage": 80,
        "children": Array [
          <div
            style={Object {}}
          >
            <div
              className="fade-in"
            >
              <mockConstructor
                clearOnSubmit={false}
                closeModal={[MockFunction]}
                title="mockTitle"
              />
            </div>
          </div>,
          <div />,
        ],
        "dynamicHeight": false,
        "emulateTouch": false,
        "infiniteLoop": false,
        "interval": 3000,
        "onChange": [Function],
        "onClickItem": [Function],
        "onClickThumb": [Function],
        "selectedItem": 0,
        "showArrows": false,
        "showIndicators": false,
        "showStatus": false,
        "showThumbs": false,
        "statusFormatter": [Function],
        "stopOnHover": true,
        "swipeScrollTolerance": 5,
        "swipeable": false,
        "transitionTime": 350,
        "useKeyboardArrows": false,
        "verticalSwipe": "standard",
        "width": "100%",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="fade-in"
            >
              <mockConstructor
                clearOnSubmit={false}
                closeModal={[MockFunction]}
                title="mockTitle"
              />
            </div>,
            "style": Object {},
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <mockConstructor
                clearOnSubmit={false}
                closeModal={[MockFunction]}
                title="mockTitle"
              />,
              "className": "fade-in",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "clearOnSubmit": false,
                "closeModal": [MockFunction],
                "title": "mockTitle",
              },
              "ref": null,
              "rendered": null,
              "type": [MockFunction],
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": false,
          },
          "ref": null,
          "rendered": false,
          "type": "div",
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Carousel
          autoPlay={false}
          axis="horizontal"
          centerMode={false}
          centerSlidePercentage={80}
          dynamicHeight={false}
          emulateTouch={false}
          infiniteLoop={false}
          interval={3000}
          onChange={[Function]}
          onClickItem={[Function]}
          onClickThumb={[Function]}
          selectedItem={0}
          showArrows={false}
          showIndicators={false}
          showStatus={false}
          showThumbs={false}
          statusFormatter={[Function]}
          stopOnHover={true}
          swipeScrollTolerance={5}
          swipeable={false}
          transitionTime={350}
          useKeyboardArrows={false}
          verticalSwipe="standard"
          width="100%"
        >
          <div
            style={Object {}}
          >
            <div
              className="fade-in"
            >
              <mockConstructor
                clearOnSubmit={false}
                closeModal={[MockFunction]}
                title="mockTitle"
              />
            </div>
          </div>
          <div />
        </Carousel>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoPlay": false,
          "axis": "horizontal",
          "centerMode": false,
          "centerSlidePercentage": 80,
          "children": Array [
            <div
              style={Object {}}
            >
              <div
                className="fade-in"
              >
                <mockConstructor
                  clearOnSubmit={false}
                  closeModal={[MockFunction]}
                  title="mockTitle"
                />
              </div>
            </div>,
            <div />,
          ],
          "dynamicHeight": false,
          "emulateTouch": false,
          "infiniteLoop": false,
          "interval": 3000,
          "onChange": [Function],
          "onClickItem": [Function],
          "onClickThumb": [Function],
          "selectedItem": 0,
          "showArrows": false,
          "showIndicators": false,
          "showStatus": false,
          "showThumbs": false,
          "statusFormatter": [Function],
          "stopOnHover": true,
          "swipeScrollTolerance": 5,
          "swipeable": false,
          "transitionTime": 350,
          "useKeyboardArrows": false,
          "verticalSwipe": "standard",
          "width": "100%",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="fade-in"
              >
                <mockConstructor
                  clearOnSubmit={false}
                  closeModal={[MockFunction]}
                  title="mockTitle"
                />
              </div>,
              "style": Object {},
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <mockConstructor
                  clearOnSubmit={false}
                  closeModal={[MockFunction]}
                  title="mockTitle"
                />,
                "className": "fade-in",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "clearOnSubmit": false,
                  "closeModal": [MockFunction],
                  "title": "mockTitle",
                },
                "ref": null,
                "rendered": null,
                "type": [MockFunction],
              },
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": false,
            },
            "ref": null,
            "rendered": false,
            "type": "div",
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
