// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RenderLargeSelect renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RenderLargeSelect
    data={Array []}
    handleChange={[MockFunction]}
    handleSearch={[Function]}
    handleSelect={[Function]}
    id="parties"
    input={
      Object {
        "onChange": [MockFunction] {
          "calls": Array [
            Array [
              "1",
            ],
          ],
        },
        "value": "",
      }
    }
    label=""
    meta={
      Object {
        "error": false,
        "touched": false,
        "warning": false,
      }
    }
    option={Object {}}
    placeholder=""
    selectedOption={
      Object {
        "key": "1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <AutoComplete
        backfill={true}
        choiceTransitionName="zoom"
        dataSource={Array []}
        defaultActiveFirstOption={false}
        dropdownMatchSelectWidth={true}
        filterOption={[Function]}
        id="parties"
        notFoundContent="Not Found"
        onBlur={undefined}
        onChange={
          [MockFunction] {
            "calls": Array [
              Array [
                "1",
              ],
            ],
          }
        }
        onSearch={[Function]}
        onSelect={[Function]}
        optionLabelProp="children"
        placeholder=""
        showSearch={false}
        style={
          Object {
            "width": "100%",
          }
        }
        transitionName="slide-up"
        value="1"
      >
        <Input
          disabled={false}
          suffix={
            <Icon
              className="certain-category-icon"
              type="search"
            />
          }
          type="text"
          value={undefined}
        />
      </AutoComplete>,
      "hasFeedback": false,
      "help": false,
      "label": "",
      "validateStatus": "",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "backfill": true,
        "children": <Input
          disabled={false}
          suffix={
            <Icon
              className="certain-category-icon"
              type="search"
            />
          }
          type="text"
          value={undefined}
        />,
        "choiceTransitionName": "zoom",
        "dataSource": Array [],
        "defaultActiveFirstOption": false,
        "dropdownMatchSelectWidth": true,
        "filterOption": [Function],
        "id": "parties",
        "notFoundContent": "Not Found",
        "onBlur": undefined,
        "onChange": [MockFunction] {
          "calls": Array [
            Array [
              "1",
            ],
          ],
        },
        "onSearch": [Function],
        "onSelect": [Function],
        "optionLabelProp": "children",
        "placeholder": "",
        "showSearch": false,
        "style": Object {
          "width": "100%",
        },
        "transitionName": "slide-up",
        "value": "1",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "disabled": false,
          "suffix": <Icon
            className="certain-category-icon"
            type="search"
          />,
          "type": "text",
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <AutoComplete
          backfill={true}
          choiceTransitionName="zoom"
          dataSource={Array []}
          defaultActiveFirstOption={false}
          dropdownMatchSelectWidth={true}
          filterOption={[Function]}
          id="parties"
          notFoundContent="Not Found"
          onBlur={undefined}
          onChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  "1",
                ],
              ],
            }
          }
          onSearch={[Function]}
          onSelect={[Function]}
          optionLabelProp="children"
          placeholder=""
          showSearch={false}
          style={
            Object {
              "width": "100%",
            }
          }
          transitionName="slide-up"
          value="1"
        >
          <Input
            disabled={false}
            suffix={
              <Icon
                className="certain-category-icon"
                type="search"
              />
            }
            type="text"
            value={undefined}
          />
        </AutoComplete>,
        "hasFeedback": false,
        "help": false,
        "label": "",
        "validateStatus": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "backfill": true,
          "children": <Input
            disabled={false}
            suffix={
              <Icon
                className="certain-category-icon"
                type="search"
              />
            }
            type="text"
            value={undefined}
          />,
          "choiceTransitionName": "zoom",
          "dataSource": Array [],
          "defaultActiveFirstOption": false,
          "dropdownMatchSelectWidth": true,
          "filterOption": [Function],
          "id": "parties",
          "notFoundContent": "Not Found",
          "onBlur": undefined,
          "onChange": [MockFunction] {
            "calls": Array [
              Array [
                "1",
              ],
            ],
          },
          "onSearch": [Function],
          "onSelect": [Function],
          "optionLabelProp": "children",
          "placeholder": "",
          "showSearch": false,
          "style": Object {
            "width": "100%",
          },
          "transitionName": "slide-up",
          "value": "1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": false,
            "suffix": <Icon
              className="certain-category-icon"
              type="search"
            />,
            "type": "text",
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
