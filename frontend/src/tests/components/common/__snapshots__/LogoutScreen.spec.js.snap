// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Logout renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Logout
    keycloak={Object {}}
    logoutUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt="mine_img"
          src={
            Object {
              "process": [Function],
            }
          }
        />,
        <p>
          If you would like to return to CORE, please log in below
        </p>,
        <Link
          replace={false}
          to="/dashboard/mines"
        >
          <Button
            block={false}
            className="full-mobile"
            ghost={false}
            htmlType="button"
            loading={false}
            type="primary"
          >
            Log In
          </Button>
        </Link>,
      ],
      "className": "logout-screen",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "mine_img",
          "src": Object {
            "process": [Function],
          },
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "If you would like to return to CORE, please log in below",
        },
        "ref": null,
        "rendered": "If you would like to return to CORE, please log in below",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Button
            block={false}
            className="full-mobile"
            ghost={false}
            htmlType="button"
            loading={false}
            type="primary"
          >
            Log In
          </Button>,
          "replace": false,
          "to": "/dashboard/mines",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "block": false,
            "children": "Log In",
            "className": "full-mobile",
            "ghost": false,
            "htmlType": "button",
            "loading": false,
            "type": "primary",
          },
          "ref": null,
          "rendered": "Log In",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="mine_img"
            src={
              Object {
                "process": [Function],
              }
            }
          />,
          <p>
            If you would like to return to CORE, please log in below
          </p>,
          <Link
            replace={false}
            to="/dashboard/mines"
          >
            <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="button"
              loading={false}
              type="primary"
            >
              Log In
            </Button>
          </Link>,
        ],
        "className": "logout-screen",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "mine_img",
            "src": Object {
              "process": [Function],
            },
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "If you would like to return to CORE, please log in below",
          },
          "ref": null,
          "rendered": "If you would like to return to CORE, please log in below",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Button
              block={false}
              className="full-mobile"
              ghost={false}
              htmlType="button"
              loading={false}
              type="primary"
            >
              Log In
            </Button>,
            "replace": false,
            "to": "/dashboard/mines",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": "Log In",
              "className": "full-mobile",
              "ghost": false,
              "htmlType": "button",
              "loading": false,
              "type": "primary",
            },
            "ref": null,
            "rendered": "Log In",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
