// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilePicker renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilePicker
    acceptedFileTypesMap={undefined}
    existingFilesDropdown={
      Array [
        Object {
          "label": "file",
          "value": "GUID",
        },
      ]
    }
    maxFileSize={undefined}
    onSelectExisting={[MockFunction]}
    uploadUrl="localhost:9999"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="center"
        >
          <FormItem
            hasFeedback={false}
          >
            <RadioGroup
              buttonStyle="outline"
              defaultValue={true}
              disabled={false}
              onChange={[Function]}
              size="large"
            >
              <RadioButton
                value={true}
              >
                Upload new file(s)
              </RadioButton>
              <RadioButton
                value={false}
              >
                Attach existing file(s)
              </RadioButton>
            </RadioGroup>
          </FormItem>
        </div>,
        <FormItem
          hasFeedback={false}
        >
          <Field
            acceptedFileTypesMap={undefined}
            component={[Function]}
            existingFilesDropdown={
              Array [
                Object {
                  "label": "file",
                  "value": "GUID",
                },
              ]
            }
            id="fileUpload"
            maxFileSize={undefined}
            name="fileUpload"
            onSelectExisting={[MockFunction]}
            uploadUrl="localhost:9999"
          />
        </FormItem>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormItem
            hasFeedback={false}
          >
            <RadioGroup
              buttonStyle="outline"
              defaultValue={true}
              disabled={false}
              onChange={[Function]}
              size="large"
            >
              <RadioButton
                value={true}
              >
                Upload new file(s)
              </RadioButton>
              <RadioButton
                value={false}
              >
                Attach existing file(s)
              </RadioButton>
            </RadioGroup>
          </FormItem>,
          "className": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <RadioGroup
              buttonStyle="outline"
              defaultValue={true}
              disabled={false}
              onChange={[Function]}
              size="large"
            >
              <RadioButton
                value={true}
              >
                Upload new file(s)
              </RadioButton>
              <RadioButton
                value={false}
              >
                Attach existing file(s)
              </RadioButton>
            </RadioGroup>,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "buttonStyle": "outline",
              "children": Array [
                <RadioButton
                  value={true}
                >
                  Upload new file(s)
                </RadioButton>,
                <RadioButton
                  value={false}
                >
                  Attach existing file(s)
                </RadioButton>,
              ],
              "defaultValue": true,
              "disabled": false,
              "onChange": [Function],
              "size": "large",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Upload new file(s)",
                  "value": true,
                },
                "ref": null,
                "rendered": "Upload new file(s)",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Attach existing file(s)",
                  "value": false,
                },
                "ref": null,
                "rendered": "Attach existing file(s)",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Field
            acceptedFileTypesMap={undefined}
            component={[Function]}
            existingFilesDropdown={
              Array [
                Object {
                  "label": "file",
                  "value": "GUID",
                },
              ]
            }
            id="fileUpload"
            maxFileSize={undefined}
            name="fileUpload"
            onSelectExisting={[MockFunction]}
            uploadUrl="localhost:9999"
          />,
          "hasFeedback": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "acceptedFileTypesMap": undefined,
            "component": [Function],
            "existingFilesDropdown": Array [
              Object {
                "label": "file",
                "value": "GUID",
              },
            ],
            "id": "fileUpload",
            "maxFileSize": undefined,
            "name": "fileUpload",
            "onSelectExisting": [MockFunction],
            "uploadUrl": "localhost:9999",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="center"
          >
            <FormItem
              hasFeedback={false}
            >
              <RadioGroup
                buttonStyle="outline"
                defaultValue={true}
                disabled={false}
                onChange={[Function]}
                size="large"
              >
                <RadioButton
                  value={true}
                >
                  Upload new file(s)
                </RadioButton>
                <RadioButton
                  value={false}
                >
                  Attach existing file(s)
                </RadioButton>
              </RadioGroup>
            </FormItem>
          </div>,
          <FormItem
            hasFeedback={false}
          >
            <Field
              acceptedFileTypesMap={undefined}
              component={[Function]}
              existingFilesDropdown={
                Array [
                  Object {
                    "label": "file",
                    "value": "GUID",
                  },
                ]
              }
              id="fileUpload"
              maxFileSize={undefined}
              name="fileUpload"
              onSelectExisting={[MockFunction]}
              uploadUrl="localhost:9999"
            />
          </FormItem>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormItem
              hasFeedback={false}
            >
              <RadioGroup
                buttonStyle="outline"
                defaultValue={true}
                disabled={false}
                onChange={[Function]}
                size="large"
              >
                <RadioButton
                  value={true}
                >
                  Upload new file(s)
                </RadioButton>
                <RadioButton
                  value={false}
                >
                  Attach existing file(s)
                </RadioButton>
              </RadioGroup>
            </FormItem>,
            "className": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <RadioGroup
                buttonStyle="outline"
                defaultValue={true}
                disabled={false}
                onChange={[Function]}
                size="large"
              >
                <RadioButton
                  value={true}
                >
                  Upload new file(s)
                </RadioButton>
                <RadioButton
                  value={false}
                >
                  Attach existing file(s)
                </RadioButton>
              </RadioGroup>,
              "hasFeedback": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonStyle": "outline",
                "children": Array [
                  <RadioButton
                    value={true}
                  >
                    Upload new file(s)
                  </RadioButton>,
                  <RadioButton
                    value={false}
                  >
                    Attach existing file(s)
                  </RadioButton>,
                ],
                "defaultValue": true,
                "disabled": false,
                "onChange": [Function],
                "size": "large",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Upload new file(s)",
                    "value": true,
                  },
                  "ref": null,
                  "rendered": "Upload new file(s)",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Attach existing file(s)",
                    "value": false,
                  },
                  "ref": null,
                  "rendered": "Attach existing file(s)",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Field
              acceptedFileTypesMap={undefined}
              component={[Function]}
              existingFilesDropdown={
                Array [
                  Object {
                    "label": "file",
                    "value": "GUID",
                  },
                ]
              }
              id="fileUpload"
              maxFileSize={undefined}
              name="fileUpload"
              onSelectExisting={[MockFunction]}
              uploadUrl="localhost:9999"
            />,
            "hasFeedback": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "acceptedFileTypesMap": undefined,
              "component": [Function],
              "existingFilesDropdown": Array [
                Object {
                  "label": "file",
                  "value": "GUID",
                },
              ],
              "id": "fileUpload",
              "maxFileSize": undefined,
              "name": "fileUpload",
              "onSelectExisting": [MockFunction],
              "uploadUrl": "localhost:9999",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
