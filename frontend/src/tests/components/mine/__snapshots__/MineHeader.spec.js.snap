// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MineHeader renders dispatchProperly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MineHeader
    closeModal={[MockFunction]}
    fetchMineRecordById={[MockFunction]}
    mine={
      Object {
        "mine_expected_documents": Array [
          Object {
            "date_created": "2018-11-19",
            "due_date": "",
            "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
            "exp_document_name": "OMS Manual",
            "expected_document_status": Object {
              "description": "Not Received",
              "exp_document_status_code": "MIA",
            },
            "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
            "related_documents": Array [],
            "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
          },
        ],
        "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
        "mine_location": Object {
          "latitude": null,
          "longitude": null,
        },
        "mine_name": "mine3",
        "mine_no": "BLAH9091",
        "mine_permit": Array [],
        "mine_region": "NE",
        "mine_status": Object {
          "effective_date": "2018-10-16",
          "expiry_date": null,
          "status_labels": Array [
            "Closed",
            "Care & Maintenance",
          ],
          "statusvalue": Array [
            "CLD",
            "CM",
          ],
        },
        "mine_tailings_storage_facilities": Array [
          Object {
            "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
            "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
            "mine_tailings_storage_facility_name": "MockTSF",
          },
        ],
        "mine_type": Array [
          Object {
            "mine_tenure_type_code": "PLR",
          },
          Object {
            "mine_tenure_type_code": "MIN",
          },
        ],
        "mineral_tenure_xref": Array [
          Object {
            "tenure_number_id": "1234567",
          },
        ],
        "verified_status": Object {
          "healthy_ind": null,
          "mine_guid": null,
          "mine_name": null,
          "verifying_timestamp": null,
          "verifying_user": null,
        },
      }
    }
    mineRegionHash={
      Object {
        "NE": "North East",
        "NW": "North West",
        "SC": "South Central",
        "SE": "South East",
        "SW": "South West",
      }
    }
    mineRegionOptions={
      Array [
        Object {
          "label": "South West",
          "value": "SW",
        },
        Object {
          "label": "South Central",
          "value": "SC",
        },
        Object {
          "label": "North West",
          "value": "NW",
        },
        Object {
          "label": "North East",
          "value": "NE",
        },
        Object {
          "label": "South East",
          "value": "SE",
        },
      ]
    }
    mineStatusOptions={
      Array [
        Object {
          "mine_operation_status": Object {
            "description": "Abandoned",
            "mine_operation_status_code": "ABN",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "d5c1d966-04ef-4bdb-b7b7-feaead5cf836",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "d6ab34fd-d903-4eac-bdf5-65cf8009b8e9",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Care & Maintenance",
            "mine_operation_status_reason_code": "CM",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "251dc078-bb13-4cb9-b6dd-81310b9cb864",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance",
            "mine_operation_status_sub_reason_code": "LTM",
          },
          "mine_status_xref_guid": "0d85c5b2-2cc1-4e2e-8caa-33a6504d3032",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance & Water Treatment",
            "mine_operation_status_sub_reason_code": "LWT",
          },
          "mine_status_xref_guid": "acc1195c-81e9-475a-8653-e58cc4893794",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Reclamation",
            "mine_operation_status_reason_code": "REC",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Permit Release Pending",
            "mine_operation_status_sub_reason_code": "PRP",
          },
          "mine_status_xref_guid": "e3bdc022-43ff-40c9-8807-dc93779362b3",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance",
            "mine_operation_status_sub_reason_code": "LTM",
          },
          "mine_status_xref_guid": "c9c490f7-d7fd-41fe-9409-e0218edff065",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Long Term Maintenance & Water Treatment",
            "mine_operation_status_sub_reason_code": "LWT",
          },
          "mine_status_xref_guid": "1b30ddaa-9573-4c3f-9e4e-d83eddf52736",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Reclamation Not Started",
            "mine_operation_status_sub_reason_code": "RNS",
          },
          "mine_status_xref_guid": "6c6ed5d7-f251-4533-976a-df54013d08d5",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Orphaned",
            "mine_operation_status_reason_code": "ORP",
          },
          "mine_operation_status_sub_reason": Object {
            "description": "Site Visit Required",
            "mine_operation_status_sub_reason_code": "SVR",
          },
          "mine_status_xref_guid": "2d12f1cd-b49c-4cd6-9c46-b53516128ce9",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Closed",
            "mine_operation_status_code": "CLD",
          },
          "mine_operation_status_reason": Object {
            "description": "Unknown",
            "mine_operation_status_reason_code": "UN",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "0b414d87-b703-4d82-8926-b6cb057944e4",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Not Started",
            "mine_operation_status_code": "NS",
          },
          "mine_operation_status_reason": Object {
            "description": null,
            "mine_operation_status_reason_code": null,
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "fbdadfd6-b9ac-4483-b6e7-a36d1bb41a1d",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Operating",
            "mine_operation_status_code": "OP",
          },
          "mine_operation_status_reason": Object {
            "description": "Year round",
            "mine_operation_status_reason_code": "YR",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "578abd0e-02e8-4a0a-8959-750e8c99cbb5",
        },
        Object {
          "mine_operation_status": Object {
            "description": "Operating",
            "mine_operation_status_code": "OP",
          },
          "mine_operation_status_reason": Object {
            "description": "Seasonal",
            "mine_operation_status_reason_code": "SEA",
          },
          "mine_operation_status_sub_reason": Object {
            "description": null,
            "mine_operation_status_sub_reason_code": null,
          },
          "mine_status_xref_guid": "3eed5e61-1bbb-4d98-99e9-4eb3c0e8b507",
        },
      ]
    }
    mineTenureHash={
      Object {
        "BCL": "BC Land",
        "COL": "Coal",
        "MIN": "Mineral",
        "PLR": "Placer",
      }
    }
    mineTenureTypes={
      Array [
        Object {
          "label": "Coal",
          "value": "COL",
        },
        Object {
          "label": "Mineral",
          "value": "MIN",
        },
        Object {
          "label": "Placer",
          "value": "PLR",
        },
        Object {
          "label": "BC Land",
          "value": "BCL",
        },
      ]
    }
    openModal={[MockFunction]}
    transformedMineTypes={
      Object {
        "mine_commodity_code": Array [],
        "mine_disturbance_code": Array [],
        "mine_tenure_type_code": Array [],
      }
    }
    updateMineRecord={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="dashboard__header--card__content"
        >
          <div
            className="inline-flex between center-mobile"
          >
            <h1>
              mine3
            </h1>
            <div>
              <Connect(AuthorizationWrapper)
                isMajorMine={undefined}
                permission="role_create"
              >
                <Dropdown
                  className="full-height full-mobile"
                  mouseEnterDelay={0.15}
                  mouseLeaveDelay={0.1}
                  onVisibleChange={[Function]}
                  overlay={
                    <Menu
                      onClick={[Function]}
                    >
                      <MenuItem>
                        <button
                          className="full"
                          onClick={[Function]}
                          type="button"
                        >
                          <img
                            alt="pencil"
                            className="padding-small"
                            src={
                              Object {
                                "process": [Function],
                              }
                            }
                          />
                          Update Mine Record
                        </button>
                      </MenuItem>
                      <MenuItem>
                        <button
                          className="full"
                          onClick={[Function]}
                          type="button"
                        >
                          <img
                            alt="document"
                            className="padding-small"
                            src={
                              Object {
                                "process": [Function],
                              }
                            }
                          />
                          + Add TSF
                        </button>
                      </MenuItem>
                      <Connect(AuthorizationWrapper)
                        inTesting={true}
                      >
                        <div
                          className="custom-menu-item"
                        >
                          <button
                            className="full"
                            onClick={undefined}
                            type="button"
                          >
                            <img
                              alt="document"
                              className="padding-small"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Subscribe
                          </button>
                        </div>
                      </Connect(AuthorizationWrapper)>
                      <Connect(AuthorizationWrapper)
                        inTesting={true}
                      >
                        <div
                          className="custom-menu-item"
                        >
                          <Popconfirm
                            cancelText="No"
                            icon={
                              <Icon
                                theme="filled"
                                type="exclamation-circle"
                              />
                            }
                            okText="Yes"
                            okType="primary"
                            onConfirm={[Function]}
                            placement="left"
                            title="Are you sure?"
                            transitionName="zoom-big"
                            trigger="click"
                          >
                            <button
                              className="full"
                              type="button"
                            >
                              <img
                                alt="checkmark"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                                width="30"
                              />
                              Verify Mine Data
                            </button>
                          </Popconfirm>
                        </div>
                      </Connect(AuthorizationWrapper)>
                      <Connect(AuthorizationWrapper)
                        inTesting={true}
                      >
                        <div
                          className="custom-menu-item"
                        >
                          <Popconfirm
                            cancelText="No"
                            icon={
                              <Icon
                                theme="filled"
                                type="exclamation-circle"
                              />
                            }
                            okText="Yes"
                            okType="primary"
                            onConfirm={[Function]}
                            placement="left"
                            title="Are you sure?"
                            transitionName="zoom-big"
                            trigger="click"
                          >
                            <button
                              className="full"
                              type="button"
                            >
                              <img
                                alt="hazard"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                                width="30"
                              />
                              Mark Data for Verification
                            </button>
                          </Popconfirm>
                        </div>
                      </Connect(AuthorizationWrapper)>
                    </Menu>
                  }
                  placement="bottomLeft"
                  visible={false}
                >
                  <Button
                    block={false}
                    ghost={false}
                    htmlType="button"
                    loading={false}
                    type="primary"
                  >
                    <div
                      className="padding-small"
                    >
                      <img
                        alt="Add/Edit"
                        className="padding-small--right"
                        src={
                          Object {
                            "process": [Function],
                          }
                        }
                      />
                      Add/Edit
                    </div>
                  </Button>
                </Dropdown>
              </Connect(AuthorizationWrapper)>
            </div>
          </div>
          <Divider
            className="custom-large-divider"
          />
          <div
            className="inline-flex between block-mobile"
          >
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Mine No. 
              </p>
              <p>
                 
                BLAH9091
                 
              </p>
            </div>
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Mine Class 
              </p>
              <p>
                Regional mine
              </p>
            </div>
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                TSF
              </p>
              <p>
                1
              </p>
            </div>
          </div>
          <div
            className="inline-flex padding-small"
          >
            <p
              className="field-title"
            >
              Operating Status
            </p>
            <p>
              N/A
            </p>
          </div>
          <div
            className="inline-flex padding-small"
          >
            <p
              className="field-title"
            >
              Tenure
            </p>
            <div>
              <p>
                N/A
              </p>
            </div>
          </div>
          <div
            className="inline-flex padding-small wrap"
          >
            <p
              className="field-title"
            >
              Commodity
            </p>
            <p>
              N/A
            </p>
          </div>
          <div
            className="inline-flex padding-small wrap"
          >
            <p
              className="field-title"
            >
              Disturbance
            </p>
            <p>
              N/A
            </p>
          </div>
          <div
            className="inline-flex padding-small wrap"
          >
            <p
              className="field-title"
            >
              Notes
            </p>
            <div>
              <p>
                N/A
              </p>
            </div>
          </div>
        </div>,
        <div
          className="dashboard__header--card__map"
        >
          <MineHeaderMap
            lat={null}
            long={null}
            mine={
              Object {
                "mine_expected_documents": Array [
                  Object {
                    "date_created": "2018-11-19",
                    "due_date": "",
                    "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                    "exp_document_name": "OMS Manual",
                    "expected_document_status": Object {
                      "description": "Not Received",
                      "exp_document_status_code": "MIA",
                    },
                    "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                    "related_documents": Array [],
                    "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                  },
                ],
                "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                "mine_location": Object {
                  "latitude": null,
                  "longitude": null,
                },
                "mine_name": "mine3",
                "mine_no": "BLAH9091",
                "mine_permit": Array [],
                "mine_region": "NE",
                "mine_status": Object {
                  "effective_date": "2018-10-16",
                  "expiry_date": null,
                  "status_labels": Array [
                    "Closed",
                    "Care & Maintenance",
                  ],
                  "statusvalue": Array [
                    "CLD",
                    "CM",
                  ],
                },
                "mine_tailings_storage_facilities": Array [
                  Object {
                    "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                    "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                    "mine_tailings_storage_facility_name": "MockTSF",
                  },
                ],
                "mine_type": Array [
                  Object {
                    "mine_tenure_type_code": "PLR",
                  },
                  Object {
                    "mine_tenure_type_code": "MIN",
                  },
                ],
                "mineral_tenure_xref": Array [
                  Object {
                    "tenure_number_id": "1234567",
                  },
                ],
                "verified_status": Object {
                  "healthy_ind": null,
                  "mine_guid": null,
                  "mine_name": null,
                  "verifying_timestamp": null,
                  "verifying_user": null,
                },
              }
            }
          />
          <div
            className="dashboard__header--card__map--footer"
          >
            <div
              className="inline-flex between"
            >
              <p
                className="p-white"
              >
                Lat:
                 
              </p>
              <p
                className="p-white"
              >
                Long:
                 
              </p>
            </div>
            <div
              className="inline-flex between"
            >
              <p
                className="p-white"
              >
                Region:
                 
                North East
              </p>
              <Link
                className="link-on-dark"
                replace={false}
                target="_blank"
                to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
              >
                View In Full Map
              </Link>
            </div>
          </div>
        </div>,
      ],
      "className": "dashboard__header--card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="inline-flex between center-mobile"
            >
              <h1>
                mine3
              </h1>
              <div>
                <Connect(AuthorizationWrapper)
                  isMajorMine={undefined}
                  permission="role_create"
                >
                  <Dropdown
                    className="full-height full-mobile"
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onVisibleChange={[Function]}
                    overlay={
                      <Menu
                        onClick={[Function]}
                      >
                        <MenuItem>
                          <button
                            className="full"
                            onClick={[Function]}
                            type="button"
                          >
                            <img
                              alt="pencil"
                              className="padding-small"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Update Mine Record
                          </button>
                        </MenuItem>
                        <MenuItem>
                          <button
                            className="full"
                            onClick={[Function]}
                            type="button"
                          >
                            <img
                              alt="document"
                              className="padding-small"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            + Add TSF
                          </button>
                        </MenuItem>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <button
                              className="full"
                              onClick={undefined}
                              type="button"
                            >
                              <img
                                alt="document"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Subscribe
                            </button>
                          </div>
                        </Connect(AuthorizationWrapper)>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <Popconfirm
                              cancelText="No"
                              icon={
                                <Icon
                                  theme="filled"
                                  type="exclamation-circle"
                                />
                              }
                              okText="Yes"
                              okType="primary"
                              onConfirm={[Function]}
                              placement="left"
                              title="Are you sure?"
                              transitionName="zoom-big"
                              trigger="click"
                            >
                              <button
                                className="full"
                                type="button"
                              >
                                <img
                                  alt="checkmark"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                  width="30"
                                />
                                Verify Mine Data
                              </button>
                            </Popconfirm>
                          </div>
                        </Connect(AuthorizationWrapper)>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <Popconfirm
                              cancelText="No"
                              icon={
                                <Icon
                                  theme="filled"
                                  type="exclamation-circle"
                                />
                              }
                              okText="Yes"
                              okType="primary"
                              onConfirm={[Function]}
                              placement="left"
                              title="Are you sure?"
                              transitionName="zoom-big"
                              trigger="click"
                            >
                              <button
                                className="full"
                                type="button"
                              >
                                <img
                                  alt="hazard"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                  width="30"
                                />
                                Mark Data for Verification
                              </button>
                            </Popconfirm>
                          </div>
                        </Connect(AuthorizationWrapper)>
                      </Menu>
                    }
                    placement="bottomLeft"
                    visible={false}
                  >
                    <Button
                      block={false}
                      ghost={false}
                      htmlType="button"
                      loading={false}
                      type="primary"
                    >
                      <div
                        className="padding-small"
                      >
                        <img
                          alt="Add/Edit"
                          className="padding-small--right"
                          src={
                            Object {
                              "process": [Function],
                            }
                          }
                        />
                        Add/Edit
                      </div>
                    </Button>
                  </Dropdown>
                </Connect(AuthorizationWrapper)>
              </div>
            </div>,
            <Divider
              className="custom-large-divider"
            />,
            <div
              className="inline-flex between block-mobile"
            >
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Mine No. 
                </p>
                <p>
                   
                  BLAH9091
                   
                </p>
              </div>
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Mine Class 
                </p>
                <p>
                  Regional mine
                </p>
              </div>
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  TSF
                </p>
                <p>
                  1
                </p>
              </div>
            </div>,
            undefined,
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Operating Status
              </p>
              <p>
                N/A
              </p>
            </div>,
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Tenure
              </p>
              <div>
                <p>
                  N/A
                </p>
              </div>
            </div>,
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Commodity
              </p>
              <p>
                N/A
              </p>
            </div>,
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Disturbance
              </p>
              <p>
                N/A
              </p>
            </div>,
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Notes
              </p>
              <div>
                <p>
                  N/A
                </p>
              </div>
            </div>,
          ],
          "className": "dashboard__header--card__content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h1>
                  mine3
                </h1>,
                <div>
                  <Connect(AuthorizationWrapper)
                    isMajorMine={undefined}
                    permission="role_create"
                  >
                    <Dropdown
                      className="full-height full-mobile"
                      mouseEnterDelay={0.15}
                      mouseLeaveDelay={0.1}
                      onVisibleChange={[Function]}
                      overlay={
                        <Menu
                          onClick={[Function]}
                        >
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="pencil"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Update Mine Record
                            </button>
                          </MenuItem>
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="document"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              + Add TSF
                            </button>
                          </MenuItem>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <button
                                className="full"
                                onClick={undefined}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Subscribe
                              </button>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="checkmark"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Verify Mine Data
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="hazard"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Mark Data for Verification
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                        </Menu>
                      }
                      placement="bottomLeft"
                      visible={false}
                    >
                      <Button
                        block={false}
                        ghost={false}
                        htmlType="button"
                        loading={false}
                        type="primary"
                      >
                        <div
                          className="padding-small"
                        >
                          <img
                            alt="Add/Edit"
                            className="padding-small--right"
                            src={
                              Object {
                                "process": [Function],
                              }
                            }
                          />
                          Add/Edit
                        </div>
                      </Button>
                    </Dropdown>
                  </Connect(AuthorizationWrapper)>
                </div>,
              ],
              "className": "inline-flex between center-mobile",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "mine3",
                    false,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "mine3",
                  false,
                ],
                "type": "h1",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    undefined,
                    <Connect(AuthorizationWrapper)
                      isMajorMine={undefined}
                      permission="role_create"
                    >
                      <Dropdown
                        className="full-height full-mobile"
                        mouseEnterDelay={0.15}
                        mouseLeaveDelay={0.1}
                        onVisibleChange={[Function]}
                        overlay={
                          <Menu
                            onClick={[Function]}
                          >
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="pencil"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Update Mine Record
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                + Add TSF
                              </button>
                            </MenuItem>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <button
                                  className="full"
                                  onClick={undefined}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Subscribe
                                </button>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="checkmark"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Verify Mine Data
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="hazard"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Mark Data for Verification
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                          </Menu>
                        }
                        placement="bottomLeft"
                        visible={false}
                      >
                        <Button
                          block={false}
                          ghost={false}
                          htmlType="button"
                          loading={false}
                          type="primary"
                        >
                          <div
                            className="padding-small"
                          >
                            <img
                              alt="Add/Edit"
                              className="padding-small--right"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Add/Edit
                          </div>
                        </Button>
                      </Dropdown>
                    </Connect(AuthorizationWrapper)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <Dropdown
                        className="full-height full-mobile"
                        mouseEnterDelay={0.15}
                        mouseLeaveDelay={0.1}
                        onVisibleChange={[Function]}
                        overlay={
                          <Menu
                            onClick={[Function]}
                          >
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="pencil"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Update Mine Record
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                + Add TSF
                              </button>
                            </MenuItem>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <button
                                  className="full"
                                  onClick={undefined}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Subscribe
                                </button>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="checkmark"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Verify Mine Data
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="hazard"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Mark Data for Verification
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                          </Menu>
                        }
                        placement="bottomLeft"
                        visible={false}
                      >
                        <Button
                          block={false}
                          ghost={false}
                          htmlType="button"
                          loading={false}
                          type="primary"
                        >
                          <div
                            className="padding-small"
                          >
                            <img
                              alt="Add/Edit"
                              className="padding-small--right"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Add/Edit
                          </div>
                        </Button>
                      </Dropdown>,
                      "isMajorMine": undefined,
                      "permission": "role_create",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": <Button
                          block={false}
                          ghost={false}
                          htmlType="button"
                          loading={false}
                          type="primary"
                        >
                          <div
                            className="padding-small"
                          >
                            <img
                              alt="Add/Edit"
                              className="padding-small--right"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Add/Edit
                          </div>
                        </Button>,
                        "className": "full-height full-mobile",
                        "mouseEnterDelay": 0.15,
                        "mouseLeaveDelay": 0.1,
                        "onVisibleChange": [Function],
                        "overlay": <Menu
                          onClick={[Function]}
                        >
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="pencil"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Update Mine Record
                            </button>
                          </MenuItem>
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="document"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              + Add TSF
                            </button>
                          </MenuItem>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <button
                                className="full"
                                onClick={undefined}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Subscribe
                              </button>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="checkmark"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Verify Mine Data
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="hazard"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Mark Data for Verification
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                        </Menu>,
                        "placement": "bottomLeft",
                        "visible": false,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "block": false,
                          "children": <div
                            className="padding-small"
                          >
                            <img
                              alt="Add/Edit"
                              className="padding-small--right"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Add/Edit
                          </div>,
                          "ghost": false,
                          "htmlType": "button",
                          "loading": false,
                          "type": "primary",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <img
                                alt="Add/Edit"
                                className="padding-small--right"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />,
                              "Add/Edit",
                            ],
                            "className": "padding-small",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "alt": "Add/Edit",
                                "className": "padding-small--right",
                                "src": Object {
                                  "process": [Function],
                                },
                              },
                              "ref": null,
                              "rendered": null,
                              "type": "img",
                            },
                            "Add/Edit",
                          ],
                          "type": "div",
                        },
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "custom-large-divider",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    Mine No. 
                  </p>
                  <p>
                     
                    BLAH9091
                     
                  </p>
                </div>,
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    Mine Class 
                  </p>
                  <p>
                    Regional mine
                  </p>
                </div>,
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    TSF
                  </p>
                  <p>
                    1
                  </p>
                </div>,
              ],
              "className": "inline-flex between block-mobile",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="field-title"
                    >
                      Mine No. 
                    </p>,
                    <p>
                       
                      BLAH9091
                       
                    </p>,
                  ],
                  "className": "inline-flex padding-small",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Mine No. ",
                      "className": "field-title",
                    },
                    "ref": null,
                    "rendered": "Mine No. ",
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " ",
                        "BLAH9091",
                        " ",
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      " ",
                      "BLAH9091",
                      " ",
                    ],
                    "type": "p",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="field-title"
                    >
                      Mine Class 
                    </p>,
                    <p>
                      Regional mine
                    </p>,
                  ],
                  "className": "inline-flex padding-small",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Mine Class ",
                      "className": "field-title",
                    },
                    "ref": null,
                    "rendered": "Mine Class ",
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Regional mine",
                    },
                    "ref": null,
                    "rendered": "Regional mine",
                    "type": "p",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="field-title"
                    >
                      TSF
                    </p>,
                    <p>
                      1
                    </p>,
                  ],
                  "className": "inline-flex padding-small",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "TSF",
                      "className": "field-title",
                    },
                    "ref": null,
                    "rendered": "TSF",
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": 1,
                    },
                    "ref": null,
                    "rendered": 1,
                    "type": "p",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="field-title"
                >
                  Operating Status
                </p>,
                <p>
                  N/A
                </p>,
              ],
              "className": "inline-flex padding-small",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Operating Status",
                  "className": "field-title",
                },
                "ref": null,
                "rendered": "Operating Status",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "N/A",
                },
                "ref": null,
                "rendered": "N/A",
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="field-title"
                >
                  Tenure
                </p>,
                <div>
                  <p>
                    N/A
                  </p>
                </div>,
              ],
              "className": "inline-flex padding-small",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Tenure",
                  "className": "field-title",
                },
                "ref": null,
                "rendered": "Tenure",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <p>
                    N/A
                  </p>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "N/A",
                  },
                  "ref": null,
                  "rendered": "N/A",
                  "type": "p",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="field-title"
                >
                  Commodity
                </p>,
                <p>
                  N/A
                </p>,
              ],
              "className": "inline-flex padding-small wrap",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Commodity",
                  "className": "field-title",
                },
                "ref": null,
                "rendered": "Commodity",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "N/A",
                },
                "ref": null,
                "rendered": "N/A",
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="field-title"
                >
                  Disturbance
                </p>,
                <p>
                  N/A
                </p>,
              ],
              "className": "inline-flex padding-small wrap",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Disturbance",
                  "className": "field-title",
                },
                "ref": null,
                "rendered": "Disturbance",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "N/A",
                },
                "ref": null,
                "rendered": "N/A",
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="field-title"
                >
                  Notes
                </p>,
                <div>
                  <p>
                    N/A
                  </p>
                </div>,
              ],
              "className": "inline-flex padding-small wrap",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Notes",
                  "className": "field-title",
                },
                "ref": null,
                "rendered": "Notes",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <p>
                    N/A
                  </p>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "N/A",
                  },
                  "ref": null,
                  "rendered": "N/A",
                  "type": "p",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <MineHeaderMap
              lat={null}
              long={null}
              mine={
                Object {
                  "mine_expected_documents": Array [
                    Object {
                      "date_created": "2018-11-19",
                      "due_date": "",
                      "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                      "exp_document_name": "OMS Manual",
                      "expected_document_status": Object {
                        "description": "Not Received",
                        "exp_document_status_code": "MIA",
                      },
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "related_documents": Array [],
                      "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                    },
                  ],
                  "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                  "mine_location": Object {
                    "latitude": null,
                    "longitude": null,
                  },
                  "mine_name": "mine3",
                  "mine_no": "BLAH9091",
                  "mine_permit": Array [],
                  "mine_region": "NE",
                  "mine_status": Object {
                    "effective_date": "2018-10-16",
                    "expiry_date": null,
                    "status_labels": Array [
                      "Closed",
                      "Care & Maintenance",
                    ],
                    "statusvalue": Array [
                      "CLD",
                      "CM",
                    ],
                  },
                  "mine_tailings_storage_facilities": Array [
                    Object {
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                      "mine_tailings_storage_facility_name": "MockTSF",
                    },
                  ],
                  "mine_type": Array [
                    Object {
                      "mine_tenure_type_code": "PLR",
                    },
                    Object {
                      "mine_tenure_type_code": "MIN",
                    },
                  ],
                  "mineral_tenure_xref": Array [
                    Object {
                      "tenure_number_id": "1234567",
                    },
                  ],
                  "verified_status": Object {
                    "healthy_ind": null,
                    "mine_guid": null,
                    "mine_name": null,
                    "verifying_timestamp": null,
                    "verifying_user": null,
                  },
                }
              }
            />,
            <div
              className="dashboard__header--card__map--footer"
            >
              <div
                className="inline-flex between"
              >
                <p
                  className="p-white"
                >
                  Lat:
                   
                </p>
                <p
                  className="p-white"
                >
                  Long:
                   
                </p>
              </div>
              <div
                className="inline-flex between"
              >
                <p
                  className="p-white"
                >
                  Region:
                   
                  North East
                </p>
                <Link
                  className="link-on-dark"
                  replace={false}
                  target="_blank"
                  to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                >
                  View In Full Map
                </Link>
              </div>
            </div>,
          ],
          "className": "dashboard__header--card__map",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "lat": null,
              "long": null,
              "mine": Object {
                "mine_expected_documents": Array [
                  Object {
                    "date_created": "2018-11-19",
                    "due_date": "",
                    "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                    "exp_document_name": "OMS Manual",
                    "expected_document_status": Object {
                      "description": "Not Received",
                      "exp_document_status_code": "MIA",
                    },
                    "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                    "related_documents": Array [],
                    "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                  },
                ],
                "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                "mine_location": Object {
                  "latitude": null,
                  "longitude": null,
                },
                "mine_name": "mine3",
                "mine_no": "BLAH9091",
                "mine_permit": Array [],
                "mine_region": "NE",
                "mine_status": Object {
                  "effective_date": "2018-10-16",
                  "expiry_date": null,
                  "status_labels": Array [
                    "Closed",
                    "Care & Maintenance",
                  ],
                  "statusvalue": Array [
                    "CLD",
                    "CM",
                  ],
                },
                "mine_tailings_storage_facilities": Array [
                  Object {
                    "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                    "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                    "mine_tailings_storage_facility_name": "MockTSF",
                  },
                ],
                "mine_type": Array [
                  Object {
                    "mine_tenure_type_code": "PLR",
                  },
                  Object {
                    "mine_tenure_type_code": "MIN",
                  },
                ],
                "mineral_tenure_xref": Array [
                  Object {
                    "tenure_number_id": "1234567",
                  },
                ],
                "verified_status": Object {
                  "healthy_ind": null,
                  "mine_guid": null,
                  "mine_name": null,
                  "verifying_timestamp": null,
                  "verifying_user": null,
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="inline-flex between"
                >
                  <p
                    className="p-white"
                  >
                    Lat:
                     
                  </p>
                  <p
                    className="p-white"
                  >
                    Long:
                     
                  </p>
                </div>,
                <div
                  className="inline-flex between"
                >
                  <p
                    className="p-white"
                  >
                    Region:
                     
                    North East
                  </p>
                  <Link
                    className="link-on-dark"
                    replace={false}
                    target="_blank"
                    to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                  >
                    View In Full Map
                  </Link>
                </div>,
              ],
              "className": "dashboard__header--card__map--footer",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="p-white"
                    >
                      Lat:
                       
                    </p>,
                    <p
                      className="p-white"
                    >
                      Long:
                       
                    </p>,
                  ],
                  "className": "inline-flex between",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Lat:",
                        " ",
                        null,
                      ],
                      "className": "p-white",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Lat:",
                      " ",
                      null,
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Long:",
                        " ",
                        null,
                      ],
                      "className": "p-white",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Long:",
                      " ",
                      null,
                    ],
                    "type": "p",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="p-white"
                    >
                      Region:
                       
                      North East
                    </p>,
                    <Link
                      className="link-on-dark"
                      replace={false}
                      target="_blank"
                      to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                    >
                      View In Full Map
                    </Link>,
                  ],
                  "className": "inline-flex between",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Region:",
                        " ",
                        "North East",
                      ],
                      "className": "p-white",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Region:",
                      " ",
                      "North East",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "View In Full Map",
                      "className": "link-on-dark",
                      "replace": false,
                      "target": "_blank",
                      "to": "/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3",
                    },
                    "ref": null,
                    "rendered": "View In Full Map",
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="dashboard__header--card__content"
          >
            <div
              className="inline-flex between center-mobile"
            >
              <h1>
                mine3
              </h1>
              <div>
                <Connect(AuthorizationWrapper)
                  isMajorMine={undefined}
                  permission="role_create"
                >
                  <Dropdown
                    className="full-height full-mobile"
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onVisibleChange={[Function]}
                    overlay={
                      <Menu
                        onClick={[Function]}
                      >
                        <MenuItem>
                          <button
                            className="full"
                            onClick={[Function]}
                            type="button"
                          >
                            <img
                              alt="pencil"
                              className="padding-small"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Update Mine Record
                          </button>
                        </MenuItem>
                        <MenuItem>
                          <button
                            className="full"
                            onClick={[Function]}
                            type="button"
                          >
                            <img
                              alt="document"
                              className="padding-small"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            + Add TSF
                          </button>
                        </MenuItem>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <button
                              className="full"
                              onClick={undefined}
                              type="button"
                            >
                              <img
                                alt="document"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Subscribe
                            </button>
                          </div>
                        </Connect(AuthorizationWrapper)>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <Popconfirm
                              cancelText="No"
                              icon={
                                <Icon
                                  theme="filled"
                                  type="exclamation-circle"
                                />
                              }
                              okText="Yes"
                              okType="primary"
                              onConfirm={[Function]}
                              placement="left"
                              title="Are you sure?"
                              transitionName="zoom-big"
                              trigger="click"
                            >
                              <button
                                className="full"
                                type="button"
                              >
                                <img
                                  alt="checkmark"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                  width="30"
                                />
                                Verify Mine Data
                              </button>
                            </Popconfirm>
                          </div>
                        </Connect(AuthorizationWrapper)>
                        <Connect(AuthorizationWrapper)
                          inTesting={true}
                        >
                          <div
                            className="custom-menu-item"
                          >
                            <Popconfirm
                              cancelText="No"
                              icon={
                                <Icon
                                  theme="filled"
                                  type="exclamation-circle"
                                />
                              }
                              okText="Yes"
                              okType="primary"
                              onConfirm={[Function]}
                              placement="left"
                              title="Are you sure?"
                              transitionName="zoom-big"
                              trigger="click"
                            >
                              <button
                                className="full"
                                type="button"
                              >
                                <img
                                  alt="hazard"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                  width="30"
                                />
                                Mark Data for Verification
                              </button>
                            </Popconfirm>
                          </div>
                        </Connect(AuthorizationWrapper)>
                      </Menu>
                    }
                    placement="bottomLeft"
                    visible={false}
                  >
                    <Button
                      block={false}
                      ghost={false}
                      htmlType="button"
                      loading={false}
                      type="primary"
                    >
                      <div
                        className="padding-small"
                      >
                        <img
                          alt="Add/Edit"
                          className="padding-small--right"
                          src={
                            Object {
                              "process": [Function],
                            }
                          }
                        />
                        Add/Edit
                      </div>
                    </Button>
                  </Dropdown>
                </Connect(AuthorizationWrapper)>
              </div>
            </div>
            <Divider
              className="custom-large-divider"
            />
            <div
              className="inline-flex between block-mobile"
            >
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Mine No. 
                </p>
                <p>
                   
                  BLAH9091
                   
                </p>
              </div>
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Mine Class 
                </p>
                <p>
                  Regional mine
                </p>
              </div>
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  TSF
                </p>
                <p>
                  1
                </p>
              </div>
            </div>
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Operating Status
              </p>
              <p>
                N/A
              </p>
            </div>
            <div
              className="inline-flex padding-small"
            >
              <p
                className="field-title"
              >
                Tenure
              </p>
              <div>
                <p>
                  N/A
                </p>
              </div>
            </div>
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Commodity
              </p>
              <p>
                N/A
              </p>
            </div>
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Disturbance
              </p>
              <p>
                N/A
              </p>
            </div>
            <div
              className="inline-flex padding-small wrap"
            >
              <p
                className="field-title"
              >
                Notes
              </p>
              <div>
                <p>
                  N/A
                </p>
              </div>
            </div>
          </div>,
          <div
            className="dashboard__header--card__map"
          >
            <MineHeaderMap
              lat={null}
              long={null}
              mine={
                Object {
                  "mine_expected_documents": Array [
                    Object {
                      "date_created": "2018-11-19",
                      "due_date": "",
                      "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                      "exp_document_name": "OMS Manual",
                      "expected_document_status": Object {
                        "description": "Not Received",
                        "exp_document_status_code": "MIA",
                      },
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "related_documents": Array [],
                      "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                    },
                  ],
                  "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                  "mine_location": Object {
                    "latitude": null,
                    "longitude": null,
                  },
                  "mine_name": "mine3",
                  "mine_no": "BLAH9091",
                  "mine_permit": Array [],
                  "mine_region": "NE",
                  "mine_status": Object {
                    "effective_date": "2018-10-16",
                    "expiry_date": null,
                    "status_labels": Array [
                      "Closed",
                      "Care & Maintenance",
                    ],
                    "statusvalue": Array [
                      "CLD",
                      "CM",
                    ],
                  },
                  "mine_tailings_storage_facilities": Array [
                    Object {
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                      "mine_tailings_storage_facility_name": "MockTSF",
                    },
                  ],
                  "mine_type": Array [
                    Object {
                      "mine_tenure_type_code": "PLR",
                    },
                    Object {
                      "mine_tenure_type_code": "MIN",
                    },
                  ],
                  "mineral_tenure_xref": Array [
                    Object {
                      "tenure_number_id": "1234567",
                    },
                  ],
                  "verified_status": Object {
                    "healthy_ind": null,
                    "mine_guid": null,
                    "mine_name": null,
                    "verifying_timestamp": null,
                    "verifying_user": null,
                  },
                }
              }
            />
            <div
              className="dashboard__header--card__map--footer"
            >
              <div
                className="inline-flex between"
              >
                <p
                  className="p-white"
                >
                  Lat:
                   
                </p>
                <p
                  className="p-white"
                >
                  Long:
                   
                </p>
              </div>
              <div
                className="inline-flex between"
              >
                <p
                  className="p-white"
                >
                  Region:
                   
                  North East
                </p>
                <Link
                  className="link-on-dark"
                  replace={false}
                  target="_blank"
                  to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                >
                  View In Full Map
                </Link>
              </div>
            </div>
          </div>,
        ],
        "className": "dashboard__header--card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="inline-flex between center-mobile"
              >
                <h1>
                  mine3
                </h1>
                <div>
                  <Connect(AuthorizationWrapper)
                    isMajorMine={undefined}
                    permission="role_create"
                  >
                    <Dropdown
                      className="full-height full-mobile"
                      mouseEnterDelay={0.15}
                      mouseLeaveDelay={0.1}
                      onVisibleChange={[Function]}
                      overlay={
                        <Menu
                          onClick={[Function]}
                        >
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="pencil"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Update Mine Record
                            </button>
                          </MenuItem>
                          <MenuItem>
                            <button
                              className="full"
                              onClick={[Function]}
                              type="button"
                            >
                              <img
                                alt="document"
                                className="padding-small"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              + Add TSF
                            </button>
                          </MenuItem>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <button
                                className="full"
                                onClick={undefined}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Subscribe
                              </button>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="checkmark"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Verify Mine Data
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                          <Connect(AuthorizationWrapper)
                            inTesting={true}
                          >
                            <div
                              className="custom-menu-item"
                            >
                              <Popconfirm
                                cancelText="No"
                                icon={
                                  <Icon
                                    theme="filled"
                                    type="exclamation-circle"
                                  />
                                }
                                okText="Yes"
                                okType="primary"
                                onConfirm={[Function]}
                                placement="left"
                                title="Are you sure?"
                                transitionName="zoom-big"
                                trigger="click"
                              >
                                <button
                                  className="full"
                                  type="button"
                                >
                                  <img
                                    alt="hazard"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                    width="30"
                                  />
                                  Mark Data for Verification
                                </button>
                              </Popconfirm>
                            </div>
                          </Connect(AuthorizationWrapper)>
                        </Menu>
                      }
                      placement="bottomLeft"
                      visible={false}
                    >
                      <Button
                        block={false}
                        ghost={false}
                        htmlType="button"
                        loading={false}
                        type="primary"
                      >
                        <div
                          className="padding-small"
                        >
                          <img
                            alt="Add/Edit"
                            className="padding-small--right"
                            src={
                              Object {
                                "process": [Function],
                              }
                            }
                          />
                          Add/Edit
                        </div>
                      </Button>
                    </Dropdown>
                  </Connect(AuthorizationWrapper)>
                </div>
              </div>,
              <Divider
                className="custom-large-divider"
              />,
              <div
                className="inline-flex between block-mobile"
              >
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    Mine No. 
                  </p>
                  <p>
                     
                    BLAH9091
                     
                  </p>
                </div>
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    Mine Class 
                  </p>
                  <p>
                    Regional mine
                  </p>
                </div>
                <div
                  className="inline-flex padding-small"
                >
                  <p
                    className="field-title"
                  >
                    TSF
                  </p>
                  <p>
                    1
                  </p>
                </div>
              </div>,
              undefined,
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Operating Status
                </p>
                <p>
                  N/A
                </p>
              </div>,
              <div
                className="inline-flex padding-small"
              >
                <p
                  className="field-title"
                >
                  Tenure
                </p>
                <div>
                  <p>
                    N/A
                  </p>
                </div>
              </div>,
              <div
                className="inline-flex padding-small wrap"
              >
                <p
                  className="field-title"
                >
                  Commodity
                </p>
                <p>
                  N/A
                </p>
              </div>,
              <div
                className="inline-flex padding-small wrap"
              >
                <p
                  className="field-title"
                >
                  Disturbance
                </p>
                <p>
                  N/A
                </p>
              </div>,
              <div
                className="inline-flex padding-small wrap"
              >
                <p
                  className="field-title"
                >
                  Notes
                </p>
                <div>
                  <p>
                    N/A
                  </p>
                </div>
              </div>,
            ],
            "className": "dashboard__header--card__content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h1>
                    mine3
                  </h1>,
                  <div>
                    <Connect(AuthorizationWrapper)
                      isMajorMine={undefined}
                      permission="role_create"
                    >
                      <Dropdown
                        className="full-height full-mobile"
                        mouseEnterDelay={0.15}
                        mouseLeaveDelay={0.1}
                        onVisibleChange={[Function]}
                        overlay={
                          <Menu
                            onClick={[Function]}
                          >
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="pencil"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Update Mine Record
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                + Add TSF
                              </button>
                            </MenuItem>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <button
                                  className="full"
                                  onClick={undefined}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Subscribe
                                </button>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="checkmark"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Verify Mine Data
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="hazard"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Mark Data for Verification
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                          </Menu>
                        }
                        placement="bottomLeft"
                        visible={false}
                      >
                        <Button
                          block={false}
                          ghost={false}
                          htmlType="button"
                          loading={false}
                          type="primary"
                        >
                          <div
                            className="padding-small"
                          >
                            <img
                              alt="Add/Edit"
                              className="padding-small--right"
                              src={
                                Object {
                                  "process": [Function],
                                }
                              }
                            />
                            Add/Edit
                          </div>
                        </Button>
                      </Dropdown>
                    </Connect(AuthorizationWrapper)>
                  </div>,
                ],
                "className": "inline-flex between center-mobile",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "mine3",
                      false,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "mine3",
                    false,
                  ],
                  "type": "h1",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      undefined,
                      <Connect(AuthorizationWrapper)
                        isMajorMine={undefined}
                        permission="role_create"
                      >
                        <Dropdown
                          className="full-height full-mobile"
                          mouseEnterDelay={0.15}
                          mouseLeaveDelay={0.1}
                          onVisibleChange={[Function]}
                          overlay={
                            <Menu
                              onClick={[Function]}
                            >
                              <MenuItem>
                                <button
                                  className="full"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <img
                                    alt="pencil"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Update Mine Record
                                </button>
                              </MenuItem>
                              <MenuItem>
                                <button
                                  className="full"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  + Add TSF
                                </button>
                              </MenuItem>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <button
                                    className="full"
                                    onClick={undefined}
                                    type="button"
                                  >
                                    <img
                                      alt="document"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                    />
                                    Subscribe
                                  </button>
                                </div>
                              </Connect(AuthorizationWrapper)>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <Popconfirm
                                    cancelText="No"
                                    icon={
                                      <Icon
                                        theme="filled"
                                        type="exclamation-circle"
                                      />
                                    }
                                    okText="Yes"
                                    okType="primary"
                                    onConfirm={[Function]}
                                    placement="left"
                                    title="Are you sure?"
                                    transitionName="zoom-big"
                                    trigger="click"
                                  >
                                    <button
                                      className="full"
                                      type="button"
                                    >
                                      <img
                                        alt="checkmark"
                                        className="padding-small"
                                        src={
                                          Object {
                                            "process": [Function],
                                          }
                                        }
                                        width="30"
                                      />
                                      Verify Mine Data
                                    </button>
                                  </Popconfirm>
                                </div>
                              </Connect(AuthorizationWrapper)>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <Popconfirm
                                    cancelText="No"
                                    icon={
                                      <Icon
                                        theme="filled"
                                        type="exclamation-circle"
                                      />
                                    }
                                    okText="Yes"
                                    okType="primary"
                                    onConfirm={[Function]}
                                    placement="left"
                                    title="Are you sure?"
                                    transitionName="zoom-big"
                                    trigger="click"
                                  >
                                    <button
                                      className="full"
                                      type="button"
                                    >
                                      <img
                                        alt="hazard"
                                        className="padding-small"
                                        src={
                                          Object {
                                            "process": [Function],
                                          }
                                        }
                                        width="30"
                                      />
                                      Mark Data for Verification
                                    </button>
                                  </Popconfirm>
                                </div>
                              </Connect(AuthorizationWrapper)>
                            </Menu>
                          }
                          placement="bottomLeft"
                          visible={false}
                        >
                          <Button
                            block={false}
                            ghost={false}
                            htmlType="button"
                            loading={false}
                            type="primary"
                          >
                            <div
                              className="padding-small"
                            >
                              <img
                                alt="Add/Edit"
                                className="padding-small--right"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Add/Edit
                            </div>
                          </Button>
                        </Dropdown>
                      </Connect(AuthorizationWrapper)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": <Dropdown
                          className="full-height full-mobile"
                          mouseEnterDelay={0.15}
                          mouseLeaveDelay={0.1}
                          onVisibleChange={[Function]}
                          overlay={
                            <Menu
                              onClick={[Function]}
                            >
                              <MenuItem>
                                <button
                                  className="full"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <img
                                    alt="pencil"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Update Mine Record
                                </button>
                              </MenuItem>
                              <MenuItem>
                                <button
                                  className="full"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  + Add TSF
                                </button>
                              </MenuItem>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <button
                                    className="full"
                                    onClick={undefined}
                                    type="button"
                                  >
                                    <img
                                      alt="document"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                    />
                                    Subscribe
                                  </button>
                                </div>
                              </Connect(AuthorizationWrapper)>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <Popconfirm
                                    cancelText="No"
                                    icon={
                                      <Icon
                                        theme="filled"
                                        type="exclamation-circle"
                                      />
                                    }
                                    okText="Yes"
                                    okType="primary"
                                    onConfirm={[Function]}
                                    placement="left"
                                    title="Are you sure?"
                                    transitionName="zoom-big"
                                    trigger="click"
                                  >
                                    <button
                                      className="full"
                                      type="button"
                                    >
                                      <img
                                        alt="checkmark"
                                        className="padding-small"
                                        src={
                                          Object {
                                            "process": [Function],
                                          }
                                        }
                                        width="30"
                                      />
                                      Verify Mine Data
                                    </button>
                                  </Popconfirm>
                                </div>
                              </Connect(AuthorizationWrapper)>
                              <Connect(AuthorizationWrapper)
                                inTesting={true}
                              >
                                <div
                                  className="custom-menu-item"
                                >
                                  <Popconfirm
                                    cancelText="No"
                                    icon={
                                      <Icon
                                        theme="filled"
                                        type="exclamation-circle"
                                      />
                                    }
                                    okText="Yes"
                                    okType="primary"
                                    onConfirm={[Function]}
                                    placement="left"
                                    title="Are you sure?"
                                    transitionName="zoom-big"
                                    trigger="click"
                                  >
                                    <button
                                      className="full"
                                      type="button"
                                    >
                                      <img
                                        alt="hazard"
                                        className="padding-small"
                                        src={
                                          Object {
                                            "process": [Function],
                                          }
                                        }
                                        width="30"
                                      />
                                      Mark Data for Verification
                                    </button>
                                  </Popconfirm>
                                </div>
                              </Connect(AuthorizationWrapper)>
                            </Menu>
                          }
                          placement="bottomLeft"
                          visible={false}
                        >
                          <Button
                            block={false}
                            ghost={false}
                            htmlType="button"
                            loading={false}
                            type="primary"
                          >
                            <div
                              className="padding-small"
                            >
                              <img
                                alt="Add/Edit"
                                className="padding-small--right"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Add/Edit
                            </div>
                          </Button>
                        </Dropdown>,
                        "isMajorMine": undefined,
                        "permission": "role_create",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": <Button
                            block={false}
                            ghost={false}
                            htmlType="button"
                            loading={false}
                            type="primary"
                          >
                            <div
                              className="padding-small"
                            >
                              <img
                                alt="Add/Edit"
                                className="padding-small--right"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Add/Edit
                            </div>
                          </Button>,
                          "className": "full-height full-mobile",
                          "mouseEnterDelay": 0.15,
                          "mouseLeaveDelay": 0.1,
                          "onVisibleChange": [Function],
                          "overlay": <Menu
                            onClick={[Function]}
                          >
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="pencil"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                Update Mine Record
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="full"
                                onClick={[Function]}
                                type="button"
                              >
                                <img
                                  alt="document"
                                  className="padding-small"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />
                                + Add TSF
                              </button>
                            </MenuItem>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <button
                                  className="full"
                                  onClick={undefined}
                                  type="button"
                                >
                                  <img
                                    alt="document"
                                    className="padding-small"
                                    src={
                                      Object {
                                        "process": [Function],
                                      }
                                    }
                                  />
                                  Subscribe
                                </button>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="checkmark"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Verify Mine Data
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                            <Connect(AuthorizationWrapper)
                              inTesting={true}
                            >
                              <div
                                className="custom-menu-item"
                              >
                                <Popconfirm
                                  cancelText="No"
                                  icon={
                                    <Icon
                                      theme="filled"
                                      type="exclamation-circle"
                                    />
                                  }
                                  okText="Yes"
                                  okType="primary"
                                  onConfirm={[Function]}
                                  placement="left"
                                  title="Are you sure?"
                                  transitionName="zoom-big"
                                  trigger="click"
                                >
                                  <button
                                    className="full"
                                    type="button"
                                  >
                                    <img
                                      alt="hazard"
                                      className="padding-small"
                                      src={
                                        Object {
                                          "process": [Function],
                                        }
                                      }
                                      width="30"
                                    />
                                    Mark Data for Verification
                                  </button>
                                </Popconfirm>
                              </div>
                            </Connect(AuthorizationWrapper)>
                          </Menu>,
                          "placement": "bottomLeft",
                          "visible": false,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "block": false,
                            "children": <div
                              className="padding-small"
                            >
                              <img
                                alt="Add/Edit"
                                className="padding-small--right"
                                src={
                                  Object {
                                    "process": [Function],
                                  }
                                }
                              />
                              Add/Edit
                            </div>,
                            "ghost": false,
                            "htmlType": "button",
                            "loading": false,
                            "type": "primary",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <img
                                  alt="Add/Edit"
                                  className="padding-small--right"
                                  src={
                                    Object {
                                      "process": [Function],
                                    }
                                  }
                                />,
                                "Add/Edit",
                              ],
                              "className": "padding-small",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "alt": "Add/Edit",
                                  "className": "padding-small--right",
                                  "src": Object {
                                    "process": [Function],
                                  },
                                },
                                "ref": null,
                                "rendered": null,
                                "type": "img",
                              },
                              "Add/Edit",
                            ],
                            "type": "div",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "custom-large-divider",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="inline-flex padding-small"
                  >
                    <p
                      className="field-title"
                    >
                      Mine No. 
                    </p>
                    <p>
                       
                      BLAH9091
                       
                    </p>
                  </div>,
                  <div
                    className="inline-flex padding-small"
                  >
                    <p
                      className="field-title"
                    >
                      Mine Class 
                    </p>
                    <p>
                      Regional mine
                    </p>
                  </div>,
                  <div
                    className="inline-flex padding-small"
                  >
                    <p
                      className="field-title"
                    >
                      TSF
                    </p>
                    <p>
                      1
                    </p>
                  </div>,
                ],
                "className": "inline-flex between block-mobile",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="field-title"
                      >
                        Mine No. 
                      </p>,
                      <p>
                         
                        BLAH9091
                         
                      </p>,
                    ],
                    "className": "inline-flex padding-small",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Mine No. ",
                        "className": "field-title",
                      },
                      "ref": null,
                      "rendered": "Mine No. ",
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          " ",
                          "BLAH9091",
                          " ",
                        ],
                      },
                      "ref": null,
                      "rendered": Array [
                        " ",
                        "BLAH9091",
                        " ",
                      ],
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="field-title"
                      >
                        Mine Class 
                      </p>,
                      <p>
                        Regional mine
                      </p>,
                    ],
                    "className": "inline-flex padding-small",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Mine Class ",
                        "className": "field-title",
                      },
                      "ref": null,
                      "rendered": "Mine Class ",
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Regional mine",
                      },
                      "ref": null,
                      "rendered": "Regional mine",
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="field-title"
                      >
                        TSF
                      </p>,
                      <p>
                        1
                      </p>,
                    ],
                    "className": "inline-flex padding-small",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "TSF",
                        "className": "field-title",
                      },
                      "ref": null,
                      "rendered": "TSF",
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": 1,
                      },
                      "ref": null,
                      "rendered": 1,
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="field-title"
                  >
                    Operating Status
                  </p>,
                  <p>
                    N/A
                  </p>,
                ],
                "className": "inline-flex padding-small",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Operating Status",
                    "className": "field-title",
                  },
                  "ref": null,
                  "rendered": "Operating Status",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "N/A",
                  },
                  "ref": null,
                  "rendered": "N/A",
                  "type": "p",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="field-title"
                  >
                    Tenure
                  </p>,
                  <div>
                    <p>
                      N/A
                    </p>
                  </div>,
                ],
                "className": "inline-flex padding-small",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Tenure",
                    "className": "field-title",
                  },
                  "ref": null,
                  "rendered": "Tenure",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <p>
                      N/A
                    </p>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "N/A",
                    },
                    "ref": null,
                    "rendered": "N/A",
                    "type": "p",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="field-title"
                  >
                    Commodity
                  </p>,
                  <p>
                    N/A
                  </p>,
                ],
                "className": "inline-flex padding-small wrap",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Commodity",
                    "className": "field-title",
                  },
                  "ref": null,
                  "rendered": "Commodity",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "N/A",
                  },
                  "ref": null,
                  "rendered": "N/A",
                  "type": "p",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="field-title"
                  >
                    Disturbance
                  </p>,
                  <p>
                    N/A
                  </p>,
                ],
                "className": "inline-flex padding-small wrap",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Disturbance",
                    "className": "field-title",
                  },
                  "ref": null,
                  "rendered": "Disturbance",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "N/A",
                  },
                  "ref": null,
                  "rendered": "N/A",
                  "type": "p",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="field-title"
                  >
                    Notes
                  </p>,
                  <div>
                    <p>
                      N/A
                    </p>
                  </div>,
                ],
                "className": "inline-flex padding-small wrap",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Notes",
                    "className": "field-title",
                  },
                  "ref": null,
                  "rendered": "Notes",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <p>
                      N/A
                    </p>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "N/A",
                    },
                    "ref": null,
                    "rendered": "N/A",
                    "type": "p",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <MineHeaderMap
                lat={null}
                long={null}
                mine={
                  Object {
                    "mine_expected_documents": Array [
                      Object {
                        "date_created": "2018-11-19",
                        "due_date": "",
                        "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                        "exp_document_name": "OMS Manual",
                        "expected_document_status": Object {
                          "description": "Not Received",
                          "exp_document_status_code": "MIA",
                        },
                        "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                        "related_documents": Array [],
                        "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                      },
                    ],
                    "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                    "mine_location": Object {
                      "latitude": null,
                      "longitude": null,
                    },
                    "mine_name": "mine3",
                    "mine_no": "BLAH9091",
                    "mine_permit": Array [],
                    "mine_region": "NE",
                    "mine_status": Object {
                      "effective_date": "2018-10-16",
                      "expiry_date": null,
                      "status_labels": Array [
                        "Closed",
                        "Care & Maintenance",
                      ],
                      "statusvalue": Array [
                        "CLD",
                        "CM",
                      ],
                    },
                    "mine_tailings_storage_facilities": Array [
                      Object {
                        "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                        "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                        "mine_tailings_storage_facility_name": "MockTSF",
                      },
                    ],
                    "mine_type": Array [
                      Object {
                        "mine_tenure_type_code": "PLR",
                      },
                      Object {
                        "mine_tenure_type_code": "MIN",
                      },
                    ],
                    "mineral_tenure_xref": Array [
                      Object {
                        "tenure_number_id": "1234567",
                      },
                    ],
                    "verified_status": Object {
                      "healthy_ind": null,
                      "mine_guid": null,
                      "mine_name": null,
                      "verifying_timestamp": null,
                      "verifying_user": null,
                    },
                  }
                }
              />,
              <div
                className="dashboard__header--card__map--footer"
              >
                <div
                  className="inline-flex between"
                >
                  <p
                    className="p-white"
                  >
                    Lat:
                     
                  </p>
                  <p
                    className="p-white"
                  >
                    Long:
                     
                  </p>
                </div>
                <div
                  className="inline-flex between"
                >
                  <p
                    className="p-white"
                  >
                    Region:
                     
                    North East
                  </p>
                  <Link
                    className="link-on-dark"
                    replace={false}
                    target="_blank"
                    to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                  >
                    View In Full Map
                  </Link>
                </div>
              </div>,
            ],
            "className": "dashboard__header--card__map",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "lat": null,
                "long": null,
                "mine": Object {
                  "mine_expected_documents": Array [
                    Object {
                      "date_created": "2018-11-19",
                      "due_date": "",
                      "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
                      "exp_document_name": "OMS Manual",
                      "expected_document_status": Object {
                        "description": "Not Received",
                        "exp_document_status_code": "MIA",
                      },
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "related_documents": Array [],
                      "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
                    },
                  ],
                  "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                  "mine_location": Object {
                    "latitude": null,
                    "longitude": null,
                  },
                  "mine_name": "mine3",
                  "mine_no": "BLAH9091",
                  "mine_permit": Array [],
                  "mine_region": "NE",
                  "mine_status": Object {
                    "effective_date": "2018-10-16",
                    "expiry_date": null,
                    "status_labels": Array [
                      "Closed",
                      "Care & Maintenance",
                    ],
                    "statusvalue": Array [
                      "CLD",
                      "CM",
                    ],
                  },
                  "mine_tailings_storage_facilities": Array [
                    Object {
                      "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
                      "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
                      "mine_tailings_storage_facility_name": "MockTSF",
                    },
                  ],
                  "mine_type": Array [
                    Object {
                      "mine_tenure_type_code": "PLR",
                    },
                    Object {
                      "mine_tenure_type_code": "MIN",
                    },
                  ],
                  "mineral_tenure_xref": Array [
                    Object {
                      "tenure_number_id": "1234567",
                    },
                  ],
                  "verified_status": Object {
                    "healthy_ind": null,
                    "mine_guid": null,
                    "mine_name": null,
                    "verifying_timestamp": null,
                    "verifying_user": null,
                  },
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="inline-flex between"
                  >
                    <p
                      className="p-white"
                    >
                      Lat:
                       
                    </p>
                    <p
                      className="p-white"
                    >
                      Long:
                       
                    </p>
                  </div>,
                  <div
                    className="inline-flex between"
                  >
                    <p
                      className="p-white"
                    >
                      Region:
                       
                      North East
                    </p>
                    <Link
                      className="link-on-dark"
                      replace={false}
                      target="_blank"
                      to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                    >
                      View In Full Map
                    </Link>
                  </div>,
                ],
                "className": "dashboard__header--card__map--footer",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="p-white"
                      >
                        Lat:
                         
                      </p>,
                      <p
                        className="p-white"
                      >
                        Long:
                         
                      </p>,
                    ],
                    "className": "inline-flex between",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          "Lat:",
                          " ",
                          null,
                        ],
                        "className": "p-white",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Lat:",
                        " ",
                        null,
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          "Long:",
                          " ",
                          null,
                        ],
                        "className": "p-white",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Long:",
                        " ",
                        null,
                      ],
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="p-white"
                      >
                        Region:
                         
                        North East
                      </p>,
                      <Link
                        className="link-on-dark"
                        replace={false}
                        target="_blank"
                        to="/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3"
                      >
                        View In Full Map
                      </Link>,
                    ],
                    "className": "inline-flex between",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          "Region:",
                          " ",
                          "North East",
                        ],
                        "className": "p-white",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Region:",
                        " ",
                        "North East",
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "View In Full Map",
                        "className": "link-on-dark",
                        "replace": false,
                        "target": "_blank",
                        "to": "/dashboard/mines?map=true&lat&long&zoom=14&mineName=mine3",
                      },
                      "ref": null,
                      "rendered": "View In Full Map",
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
