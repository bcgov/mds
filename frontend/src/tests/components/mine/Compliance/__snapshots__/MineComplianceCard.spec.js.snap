// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MineComplianceCard renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MineComplianceCard
    content="mock content"
    icon={null}
    title="mock title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="compliace--card--head"
        >
          <div
            className="compliace--card--head--content"
          >
            <span
              className="info-display"
            >
              mock content
            </span>
          </div>
        </div>,
        <div
          className="compliace--card--body"
        >
          <h4>
            mock title
          </h4>
        </div>,
      ],
      "className": "compliace--card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="compliace--card--head--content"
          >
            <span
              className="info-display"
            >
              mock content
            </span>
          </div>,
          "className": "compliace--card--head",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span
              className="info-display"
            >
              mock content
            </span>,
            "className": "compliace--card--head--content",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                null,
                "mock content",
              ],
              "className": "info-display",
            },
            "ref": null,
            "rendered": Array [
              null,
              "mock content",
            ],
            "type": "span",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h4>
            mock title
          </h4>,
          "className": "compliace--card--body",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "mock title",
          },
          "ref": null,
          "rendered": "mock title",
          "type": "h4",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="compliace--card--head"
          >
            <div
              className="compliace--card--head--content"
            >
              <span
                className="info-display"
              >
                mock content
              </span>
            </div>
          </div>,
          <div
            className="compliace--card--body"
          >
            <h4>
              mock title
            </h4>
          </div>,
        ],
        "className": "compliace--card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="compliace--card--head--content"
            >
              <span
                className="info-display"
              >
                mock content
              </span>
            </div>,
            "className": "compliace--card--head",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span
                className="info-display"
              >
                mock content
              </span>,
              "className": "compliace--card--head--content",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  null,
                  "mock content",
                ],
                "className": "info-display",
              },
              "ref": null,
              "rendered": Array [
                null,
                "mock content",
              ],
              "type": "span",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h4>
              mock title
            </h4>,
            "className": "compliace--card--body",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "mock title",
            },
            "ref": null,
            "rendered": "mock title",
            "type": "h4",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
