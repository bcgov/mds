// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MineApplicationInfo renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MineApplicationInfo
    applications={Array []}
    createApplication={[MockFunction]}
    fetchApplications={[MockFunction]}
    mine={
      Object {
        "guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
        "mine_expected_documents": Array [
          Object {
            "date_created": "2018-11-19",
            "due_date": "",
            "exp_document_guid": "806608ed-d2b4-4f83-8b22-739d5223c56f",
            "exp_document_name": "OMS Manual",
            "exp_document_status": Object {
              "description": "Not Received",
              "exp_document_status_code": "MIA",
            },
            "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
            "related_documents": Array [],
            "req_document_guid": "c95886bc-e4b2-4743-b38d-42eea858e9ee",
          },
        ],
        "mine_location": Object {
          "latitude": null,
          "longitude": null,
        },
        "mine_name": "mine3",
        "mine_no": "BLAH9091",
        "mine_permit": Array [],
        "mine_status": Object {
          "effective_date": "2018-10-16",
          "expiry_date": "9999-12-31",
          "status_labels": Array [
            "Closed",
            "Care & Maintenance",
          ],
          "statusvalue": Array [
            "CLD",
            "CM",
          ],
        },
        "mine_tailings_storage_facility": Array [
          Object {
            "mine_guid": "18133c75-49ad-4101-85f3-a43e35ae989a",
            "mine_tailings_storage_facility_guid": "e2629897-053e-4218-9299-479375e47f78",
            "mine_tailings_storage_facility_name": "MockTSF",
          },
        ],
        "mine_type": Array [
          Object {
            "mine_tenure_type_code": "PLR",
          },
          Object {
            "mine_tenure_type_code": "MIN",
          },
        ],
        "mineral_tenure_xref": Array [
          Object {
            "tenure_number_id": "1234567",
          },
        ],
        "region_code": "NE",
      }
    }
    updateApplication={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="inline-flex between"
      >
        <div />
        <div
          className="inline-flex between"
        >
          <Connect(AuthorizationWrapper)
            inTesting={true}
          >
            <Connect(AuthorizationWrapper)
              isMajorMine={undefined}
              permission="role_create"
            >
              <Button
                block={false}
                ghost={false}
                loading={false}
                onClick={[Function]}
                prefixCls="ant-btn"
                type="primary"
              >
                <Icon
                  style={
                    Object {
                      "fontSize": "18px",
                    }
                  }
                  theme="outlined"
                  type="plus"
                />
                Add a New Application
              </Button>
            </Connect(AuthorizationWrapper)>
          </Connect(AuthorizationWrapper)>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div />,
          <div
            className="inline-flex between"
          >
            <Connect(AuthorizationWrapper)
              inTesting={true}
            >
              <Connect(AuthorizationWrapper)
                isMajorMine={undefined}
                permission="role_create"
              >
                <Button
                  block={false}
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  <Icon
                    style={
                      Object {
                        "fontSize": "18px",
                      }
                    }
                    theme="outlined"
                    type="plus"
                  />
                  Add a New Application
                </Button>
              </Connect(AuthorizationWrapper)>
            </Connect(AuthorizationWrapper)>
          </div>,
        ],
        "className": "inline-flex between",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(AuthorizationWrapper)
              inTesting={true}
            >
              <Connect(AuthorizationWrapper)
                isMajorMine={undefined}
                permission="role_create"
              >
                <Button
                  block={false}
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  <Icon
                    style={
                      Object {
                        "fontSize": "18px",
                      }
                    }
                    theme="outlined"
                    type="plus"
                  />
                  Add a New Application
                </Button>
              </Connect(AuthorizationWrapper)>
            </Connect(AuthorizationWrapper)>,
            "className": "inline-flex between",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Connect(AuthorizationWrapper)
                isMajorMine={undefined}
                permission="role_create"
              >
                <Button
                  block={false}
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  <Icon
                    style={
                      Object {
                        "fontSize": "18px",
                      }
                    }
                    theme="outlined"
                    type="plus"
                  />
                  Add a New Application
                </Button>
              </Connect(AuthorizationWrapper)>,
              "inTesting": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Button
                  block={false}
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  <Icon
                    style={
                      Object {
                        "fontSize": "18px",
                      }
                    }
                    theme="outlined"
                    type="plus"
                  />
                  Add a New Application
                </Button>,
                "isMajorMine": undefined,
                "permission": "role_create",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": Array [
                    <Icon
                      style={
                        Object {
                          "fontSize": "18px",
                        }
                      }
                      theme="outlined"
                      type="plus"
                    />,
                    "Add a New Application",
                  ],
                  "ghost": false,
                  "loading": false,
                  "onClick": [Function],
                  "prefixCls": "ant-btn",
                  "type": "primary",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "style": Object {
                        "fontSize": "18px",
                      },
                      "theme": "outlined",
                      "type": "plus",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "Add a New Application",
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="inline-flex between"
        >
          <div />
          <div
            className="inline-flex between"
          >
            <Connect(AuthorizationWrapper)
              inTesting={true}
            >
              <Connect(AuthorizationWrapper)
                isMajorMine={undefined}
                permission="role_create"
              >
                <Button
                  block={false}
                  ghost={false}
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  type="primary"
                >
                  <Icon
                    style={
                      Object {
                        "fontSize": "18px",
                      }
                    }
                    theme="outlined"
                    type="plus"
                  />
                  Add a New Application
                </Button>
              </Connect(AuthorizationWrapper)>
            </Connect(AuthorizationWrapper)>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div />,
            <div
              className="inline-flex between"
            >
              <Connect(AuthorizationWrapper)
                inTesting={true}
              >
                <Connect(AuthorizationWrapper)
                  isMajorMine={undefined}
                  permission="role_create"
                >
                  <Button
                    block={false}
                    ghost={false}
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    type="primary"
                  >
                    <Icon
                      style={
                        Object {
                          "fontSize": "18px",
                        }
                      }
                      theme="outlined"
                      type="plus"
                    />
                    Add a New Application
                  </Button>
                </Connect(AuthorizationWrapper)>
              </Connect(AuthorizationWrapper)>
            </div>,
          ],
          "className": "inline-flex between",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(AuthorizationWrapper)
                inTesting={true}
              >
                <Connect(AuthorizationWrapper)
                  isMajorMine={undefined}
                  permission="role_create"
                >
                  <Button
                    block={false}
                    ghost={false}
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    type="primary"
                  >
                    <Icon
                      style={
                        Object {
                          "fontSize": "18px",
                        }
                      }
                      theme="outlined"
                      type="plus"
                    />
                    Add a New Application
                  </Button>
                </Connect(AuthorizationWrapper)>
              </Connect(AuthorizationWrapper)>,
              "className": "inline-flex between",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Connect(AuthorizationWrapper)
                  isMajorMine={undefined}
                  permission="role_create"
                >
                  <Button
                    block={false}
                    ghost={false}
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    type="primary"
                  >
                    <Icon
                      style={
                        Object {
                          "fontSize": "18px",
                        }
                      }
                      theme="outlined"
                      type="plus"
                    />
                    Add a New Application
                  </Button>
                </Connect(AuthorizationWrapper)>,
                "inTesting": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Button
                    block={false}
                    ghost={false}
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    type="primary"
                  >
                    <Icon
                      style={
                        Object {
                          "fontSize": "18px",
                        }
                      }
                      theme="outlined"
                      type="plus"
                    />
                    Add a New Application
                  </Button>,
                  "isMajorMine": undefined,
                  "permission": "role_create",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "block": false,
                    "children": Array [
                      <Icon
                        style={
                          Object {
                            "fontSize": "18px",
                          }
                        }
                        theme="outlined"
                        type="plus"
                      />,
                      "Add a New Application",
                    ],
                    "ghost": false,
                    "loading": false,
                    "onClick": [Function],
                    "prefixCls": "ant-btn",
                    "type": "primary",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "style": Object {
                          "fontSize": "18px",
                        },
                        "theme": "outlined",
                        "type": "plus",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "Add a New Application",
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": "br",
    },
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "applications": Array [],
        "major_mine_ind": undefined,
        "openEditApplicationModal": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
