#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:8-onbuild already run npm ci and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0

set -e


safeLogging () {
    if [[ $1 =~ http[s]?://.*@.*$ ]]; then
        echo $1 | sed 's/^.*@/redacted@/'
    else
        echo $1
    fi
}

shopt -s dotglob
echo "---> Installing application source ..."
mv /tmp/src/* ./

if [ ! -z $HTTP_PROXY ]; then
    echo "---> Setting npm http proxy to" $(safeLogging $HTTP_PROXY)
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
    echo "---> Setting npm http proxy to" $(safeLogging $http_proxy)
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
    echo "---> Setting npm https proxy to" $(safeLogging $HTTPS_PROXY)
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
    echo "---> Setting npm https proxy to" $(safeLogging $https_proxy)
	npm config set https-proxy $https_proxy
fi

# Change the npm registry mirror if provided
if [ -n "$NPM_MIRROR" ]; then
	npm config set registry $NPM_MIRROR
fi

# Set the DEV_MODE to false by default.
if [ -z "$DEV_MODE" ]; then
  export DEV_MODE=false
fi

# If NODE_ENV is not set by the user, then NODE_ENV is determined by whether
# the container is run in development mode.
if [ -z "$NODE_ENV" ]; then
  if [ "$DEV_MODE" == true ]; then
    export NODE_ENV=development
  else
    export NODE_ENV=production
  fi
fi

PROD_BUILD_DIR=build
DEV_BUILD_DIR=build-dev

if [ "$SKIP_NPM_INSTALL" == false ]; then
  echo "---> Installing all dependencies"
  npm ci
fi

#do not fail when there is no build script
echo "---> Building in dev mode"
export BUILD_DIR=$DEV_BUILD_DIR
npm run build --if-present

echo "---> Building in production mode"
export BASE_PATH=
export ASSET_PATH=/
export BUILD_DIR=$PROD_BUILD_DIR
npm run build --if-present

# Clear the npm's cache and tmp directories only if they are not a docker volumes
NPM_CACHE=$(npm config get cache)
if ! mountpoint $NPM_CACHE; then
    echo "---> Cleaning the npm cache $NPM_CACHE"
    #As of npm@5 even the 'npm cache clean --force' does not fully remove the cache directory
    rm $NPM_CACHE* -rf
fi
NPM_TMP=$(npm config get tmp)
if ! mountpoint $NPM_TMP; then
    echo "---> Cleaning the $NPM_TMP/npm-*"
    rm -rf $NPM_TMP/npm-*
fi

# Remove cache created by package installs
rm -rf node_modules/.cache/


# Fix source directory permissions
fix-permissions ./