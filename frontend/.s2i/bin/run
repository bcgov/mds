#!/bin/bash

# S2I run script for the 'nodejs' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

set -e

if [ -e "/opt/app-root/etc/generate_container_user" ]; then
  source /opt/app-root/etc/generate_container_user
fi

PROD_BUILD_DIR=build
DEV_BUILD_DIR=build-dev

# Runs the nodejs application server.
# For Dev, run the already build application
# For Test and Prod, rebuild the image to support base URLs
run_node() {
  if [ "$NODE_ENV" == "development" ]; then
    echo "Serving the application from dev build"
    export BUILD_DIR=$DEV_BUILD_DIR
    rm -rf $PROD_BUILD_DIR
    exec npm run -d $NPM_RUN
  else
    echo "Serving the application from production build"
    export BUILD_DIR=$PROD_BUILD_DIR
    rm -rf $DEV_BUILD_DIR
    exec npm run -d $NPM_RUN
  fi
}

#Set the debug port to 5858 by default.
if [ -z "$DEBUG_PORT" ]; then
  export DEBUG_PORT=5858
fi

# Set the environment to development by default.
if [ -z "$DEV_MODE" ]; then
  export DEV_MODE=false
fi

# If NODE_ENV is not set by the user, then NODE_ENV is determined by whether
# the container is run in development mode.
if [ -z "$NODE_ENV" ]; then
  if [ "$DEV_MODE" == true ]; then
    export NODE_ENV=development
  else
    export NODE_ENV=production
  fi
fi

# If the official dockerhub node image is used, skip the SCL setup below
# and just run the nodejs server
if [ -d "/usr/src/app" ]; then
  run_node
fi

# Allow users to inspect/debug the builder image itself, by using:
# $ docker run -i -t openshift/centos-nodejs-builder --debug
#
[ "$1" == "--debug" ] && exec /bin/bash

run_node