<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>3</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>x_github_event</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>payload</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>42f92aee3778eeeebf41dbc04ca5ee15</authToken>
  <triggers>
    <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger@1.40">
      <spec></spec>
      <regexpFilterText></regexpFilterText>
      <regexpFilterExpression></regexpFilterExpression>
      <genericRequestVariables>
        <org.jenkinsci.plugins.gwt.GenericRequestVariable>
          <key>payload</key>
          <regexpFilter></regexpFilter>
        </org.jenkinsci.plugins.gwt.GenericRequestVariable>
      </genericRequestVariables>
      <genericHeaderVariables>
        <org.jenkinsci.plugins.gwt.GenericHeaderVariable>
          <key>X-GitHub-Event</key>
          <regexpFilter></regexpFilter>
        </org.jenkinsci.plugins.gwt.GenericHeaderVariable>
      </genericHeaderVariables>
      <printPostContent>false</printPostContent>
      <printContributedVariables>false</printContributedVariables>
      <causeString>Generic Cause</causeString>
    </org.jenkinsci.plugins.gwt.GenericTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.plugins.groovy.SystemGroovy plugin="groovy@2.0">
      <source class="hudson.plugins.groovy.StringSystemScriptSource">
        <script plugin="script-security@1.44">
          <script>import groovy.json.JsonSlurper

String TOOLS_PROJECT = &quot;empr-mds-tools&quot;
String DEV_PROJECT = &quot;empr-mds-dev&quot;

def jsonSlurper = new JsonSlurper()

// the webhook trigger comes from GitHub as a POST request with a &quot;payload&quot; object in the body
String ghEventType = build.buildVariableResolver.resolve(&quot;x_github_event&quot;)
def payload = jsonSlurper.parseText(build.buildVariableResolver.resolve(&quot;payload&quot;))
def prNum = payload[&apos;number&apos;]

// this script is triggered on all events, but we are specifically interested in pull requests that are closed
// pull requests come with actions like &quot;opened&quot;, &quot;closed&quot;.  Merged and closed are the same event (there is an
// additional &quot;merged: true&quot; property)
if (ghEventType == &apos;pull_request&apos; &amp;&amp; payload[&apos;action&apos;] == &apos;closed&apos; &amp;&amp; prNum) {

    def sout = new StringBuilder(), serr = new StringBuilder()
    // delete all the objects in the DEV namespace labeled with this PR number
    // these objects were created as part of deploying an app (e.g. replication controller)
    def deleteAllAppObjects = &quot;oc delete all,pvc,secret,configmap -l app=mds-dev-pr-${prNum} -n ${DEV_PROJECT}&quot;.execute()
    deleteAllAppObjects.consumeProcessOutput(sout, serr)
    deleteAllAppObjects.waitForOrKill(25000)
    println &quot;out&gt; $sout err&gt; $serr&quot;

    // these objects were generated by openshift for PVC provisioning
    sout = new StringBuilder()
    serr = new StringBuilder()
    def deleteGeneratedObjects = &quot;oc delete all,pvc,secret,configmap -n ${DEV_PROJECT} -l gluster.kubernetes.io/provisioned-for-pvc=mds-postgresql-pr-${prNum} -l gluster.kubernetes.io/provisioned-for-pvc=mds-document-storage-pr-${prNum} -l gluster.kubernetes.io/provisioned-for-pvc=metabase-pr-${prNum} -l gluster.kubernetes.io/provisioned-for-pvc=mds-logs-pr-${prNum}&quot;.execute()
    deleteGeneratedObjects.consumeProcessOutput(sout, serr)
    deleteGeneratedObjects.waitForOrKill(25000)
    println &quot;out&gt; $sout err&gt; $serr&quot;

    // delete the objects in the tools project (this is primarly the build configs,
    // the imagestream is not unique to each pull request).
    sout = new StringBuilder()
    serr = new StringBuilder()
    def deleteAllBuilds = &quot;oc delete all -l app=mds-dev-pr-${prNum} -n ${TOOLS_PROJECT}&quot;.execute()
    deleteAllBuilds.consumeProcessOutput(sout, serr)
    deleteAllBuilds.waitForOrKill(25000)
    println &quot;out&gt; $sout err&gt; $serr&quot;

}</script>
          <sandbox>false</sandbox>
        </script>
      </source>
    </hudson.plugins.groovy.SystemGroovy>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>